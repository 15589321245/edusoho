'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var Browser = {};
var userAgent = navigator.userAgent.toLowerCase();
var s = void 0;
(s = userAgent.match(/rv:([\d.]+)\) like gecko/)) ? Browser.ie = s[1] : (s = userAgent.match(/msie ([\d.]+)/)) ? Browser.ie = s[1] : (s = userAgent.match(/firefox\/([\d.]+)/)) ? Browser.firefox = s[1] : (s = userAgent.match(/chrome\/([\d.]+)/)) ? Browser.chrome = s[1] : (s = userAgent.match(/opera.([\d.]+)/)) ? Browser.opera = s[1] : (s = userAgent.match(/version\/([\d.]+).*safari/)) ? Browser.safari = s[1] : 0;

if (Browser.ie) console.log('IE: ' + Browser.ie);
if (Browser.firefox) console.log('Firefox: ' + Browser.firefox);
if (Browser.chrome) console.log('Chrome: ' + Browser.chrome);
if (Browser.opera) console.log('Opera: ' + Browser.opera);
if (Browser.safari) console.log('Safari: ' + Browser.safari);

var isMobileDevice = function isMobileDevice() {
  return navigator.userAgent.match(/(iPhone|iPod|Android|ios|iPad)/i);
};

exports.Browser = Browser;
exports.isMobileDevice = isMobileDevice;

/**
 * You can work around the addEventListener, removeEventListener, Event.preventDefault and 
 * Event.stopPropagation not being supported by IE 8 using the following code at the beginning of your script. 
 * The code supports the use of handleEvent and also the DOMContentLoaded event.
 * 
 * 
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 */

(function () {
  if (!Event.prototype.preventDefault) {
    Event.prototype.preventDefault = function () {
      this.returnValue = false;
    };
  }
  if (!Event.prototype.stopPropagation) {
    Event.prototype.stopPropagation = function () {
      this.cancelBubble = true;
    };
  }
  if (!Element.prototype.addEventListener) {
    var eventListeners = [];

    var addEventListener = function addEventListener(type, listener /*, useCapture (will be ignored) */) {
      var self = this;
      var wrapper = function wrapper(e) {
        e.target = e.srcElement;
        e.currentTarget = self;
        if (typeof listener.handleEvent != 'undefined') {
          listener.handleEvent(e);
        } else {
          listener.call(self, e);
        }
      };
      if (type == "DOMContentLoaded") {
        var wrapper2 = function wrapper2(e) {
          if (document.readyState == "complete") {
            wrapper(e);
          }
        };
        document.attachEvent("onreadystatechange", wrapper2);
        eventListeners.push({ object: this, type: type, listener: listener, wrapper: wrapper2 });

        if (document.readyState == "complete") {
          var e = new Event();
          e.srcElement = window;
          wrapper2(e);
        }
      } else {
        this.attachEvent("on" + type, wrapper);
        eventListeners.push({ object: this, type: type, listener: listener, wrapper: wrapper });
      }
    };
    var removeEventListener = function removeEventListener(type, listener /*, useCapture (will be ignored) */) {
      var counter = 0;
      while (counter < eventListeners.length) {
        var eventListener = eventListeners[counter];
        if (eventListener.object == this && eventListener.type == type && eventListener.listener == listener) {
          if (type == "DOMContentLoaded") {
            this.detachEvent("onreadystatechange", eventListener.wrapper);
          } else {
            this.detachEvent("on" + type, eventListener.wrapper);
          }
          eventListeners.splice(counter, 1);
          break;
        }
        ++counter;
      }
    };
    Element.prototype.addEventListener = addEventListener;
    Element.prototype.removeEventListener = removeEventListener;
    if (HTMLDocument) {
      HTMLDocument.prototype.addEventListener = addEventListener;
      HTMLDocument.prototype.removeEventListener = removeEventListener;
    }
    if (Window) {
      Window.prototype.addEventListener = addEventListener;
      Window.prototype.removeEventListener = removeEventListener;
    }
  }
})();