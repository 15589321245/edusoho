'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chooser = require('./chooser');

var _chooser2 = _interopRequireDefault(_chooser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VideoImport = function (_Chooser) {
  _inherits(VideoImport, _Chooser);

  function VideoImport(container) {
    _classCallCheck(this, VideoImport);

    var _this = _possibleConstructorReturn(this, (VideoImport.__proto__ || Object.getPrototypeOf(VideoImport)).call(this));

    _this.container = container;
    _this.initEvent();
    return _this;
  }

  _createClass(VideoImport, [{
    key: 'initEvent',
    value: function initEvent() {
      $(this.container).on('click', '.js-video-import', this._onImport.bind(this));
      // $('.js-choose-trigger').on('click', this._open.bind(this))
    }
  }, {
    key: '_onImport',
    value: function _onImport(e) {
      var self = this,
          $btn = $(e.currentTarget),
          $urlInput = $btn.parent().siblings('input'),
          url = $urlInput.val();

      if (url.length == 0) {
        alert(Translator.trans('请输入视频页面地址'));
        return;
      }

      if (!/^[a-zA-z]+:\/\/[^\s]*$/.test(url)) {
        alert(Translator.trans('请输入正确的视频网址'));
        return;
      }

      $btn.button('loading');

      $.get($btn.data('url'), { url: url }, function (video) {
        var media = {
          status: 'none',
          type: video.type,
          source: video.source,
          name: video.name,
          uri: video.files[0].url
        };
        self._onChange(media);
        $urlInput.val('');
      }, 'json').error(function (jqXHR, textStatus, errorThrown) {
        alert(Translator.trans('读取视频页面信息失败，请检查您的输入的页面地址后重试'));
      }).always(function () {
        $btn.button('reset');
      });

      return;
    }
  }, {
    key: '_onChange',
    value: function _onChange(file) {
      // this._close();
      var value = file ? JSON.stringify(file) : '';
      this.emit('file.select', file);
      $('[data-role="placeholder"]').html(file.name);
    }
  }]);

  return VideoImport;
}(_chooser2.default);

exports.default = VideoImport;