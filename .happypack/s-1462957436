'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('jquery-jcrop/js/jquery.Jcrop.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EsImageCrop = function () {
    function EsImageCrop(config) {
        _classCallCheck(this, EsImageCrop);

        var self = this;
        this.config = $.extend({
            element: null,
            group: 'default'
        }, config);

        var $picture = this.element = $(this.config.element);
        var scaledWidth = $picture.attr('width'),
            scaledHeight = $picture.attr('height'),
            naturalWidth = $picture.data('naturalWidth'),
            naturalHeight = $picture.data('naturalHeight'),
            cropedWidth = this.config.cropedWidth,
            cropedHeight = this.config.cropedHeight,
            ratio = cropedWidth / cropedHeight,
            selectWidth = cropedWidth * (naturalWidth / scaledWidth),
            selectHeight = cropedHeight * (naturalHeight / scaledHeight);
        /*$picture.css('height', scaledHeight);
        */
        this.img = $.Jcrop($picture, {
            trueSize: [naturalWidth, naturalHeight],
            setSelect: [0, 0, selectWidth, selectHeight],
            aspectRatio: ratio,
            keySupport: false,
            allowSelect: false,
            onSelect: function onSelect(c) {
                self.onSelect(c);
            }
        });
    }

    _createClass(EsImageCrop, [{
        key: 'crop',
        value: function crop(postData) {
            var self = this;
            var cropImgUrl = app.imgCropUrl;

            postData = postData || {};

            postData = $.extend(this.img.tellScaled(), postData, { width: this.element.width(), height: this.element.height(), group: self.config.group });
            $.post(cropImgUrl, postData, function (response) {
                self.afterCrop(response);
            });
        }
    }, {
        key: 'onSelect',
        value: function onSelect(c) {
            //override it
        }
    }, {
        key: 'afterCrop',
        value: function afterCrop(response) {
            //override it
        }
    }]);

    return EsImageCrop;
}();

exports.default = EsImageCrop;