"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _formBase = require("./form-base");

var _formBase2 = _interopRequireDefault(_formBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

jQuery.validator.addMethod("fillCheck", function (value, element) {
  return this.optional(element) || /(\[\[(.+?)\]\])/i.test(value);
}, "请输入正确的答案,如今天是[[晴|阴|雨]]天");

var Fill = function (_QuestionFormBase) {
  _inherits(Fill, _QuestionFormBase);

  function Fill($form) {
    _classCallCheck(this, Fill);

    var _this = _possibleConstructorReturn(this, (Fill.__proto__ || Object.getPrototypeOf(Fill)).call(this, $form));

    _this.titleEditorToolBarName = 'Question';
    _this.initTitleEditor(_this.validator);
    _this.initAnalysisEditor();

    _this.$titleField = $('#' + _this.titleFieldId);
    _this.init();
    return _this;
  }

  _createClass(Fill, [{
    key: "init",
    value: function init() {
      this.$titleField.rules('add', {
        fillCheck: true
      });
    }
  }]);

  return Fill;
}(_formBase2.default);

exports.default = Fill;