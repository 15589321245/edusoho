'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

var _questionSubjective = require('../question-subjective');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var QuestionOperate = function () {
  function QuestionOperate($form, $modal) {
    _classCallCheck(this, QuestionOperate);

    this.$form = $form;
    this.$modal = $modal;
    this.initEvent();
  }

  _createClass(QuestionOperate, [{
    key: 'initEvent',
    value: function initEvent() {
      var _this = this;

      this.$form.on('click', '[data-role="item-delete-btn"]', function (event) {
        return _this.deleteQuestion(event);
      });
      this.$form.on('click', '[data-role="replace-item"]', function (event) {
        return _this.replaceQuestion(event);
      });
      this.$form.on('click', '[data-role="preview-btn"]', function (event) {
        return _this.previewQuestion(event);
      });
      this.$form.on('click', '[data-role="batch-delete-btn"]', function (event) {
        return _this.batchDelete(event);
      });
      this.initSortList();
    }
  }, {
    key: 'initSortList',
    value: function initSortList() {
      var _this2 = this;

      this.$form.find('tbody').sortable({
        containerPath: '> tr',
        containerSelector: 'tbody',
        itemSelector: 'tr.is-question',
        placeholder: '<tr class="placeholder"/>',
        exclude: '.notMoveHandle',
        onDrop: function onDrop(item, container, _super) {
          _super(item, container);
          if (item.hasClass('have-sub-questions')) {
            var $tbody = item.parents('tbody');
            $tbody.find('tr.is-question').each(function () {
              var $tr = $(this);
              $tbody.find('[data-parent-id=' + $tr.data('id') + ']').detach().insertAfter($tr);
            });
          }
          _this2.refreshSeqs();
        }
      });
    }
  }, {
    key: 'replaceQuestion',
    value: function replaceQuestion(event) {
      var _this3 = this;

      var $target = $(event.currentTarget);
      var excludeIds = [];
      var $tbody = this.$form.find("tbody:visible");

      $tbody.find('[name="questionIds[]"]').each(function () {
        excludeIds.push($(this).val());
      });

      this.$modal.data('manager', this).modal();
      $.get($target.data('url'), { excludeIds: excludeIds.join(','), type: $tbody.data('type') }, function (html) {
        _this3.$modal.html(html);
      });
    }
  }, {
    key: 'deleteQuestion',
    value: function deleteQuestion(event) {
      event.stopPropagation();
      var $target = $(event.currentTarget);
      var id = $target.closest('tr').data('id');
      var $tbody = $target.closest('tbody');
      $tbody.find('[data-parent-id="' + id + '"]').remove();
      $target.closest('tr').remove();
      (0, _questionSubjective.questionSubjectiveRemask)(this.$form);
      this.refreshSeqs();
    }
  }, {
    key: 'batchDelete',
    value: function batchDelete(event) {
      if (this.$form.find('[data-role="batch-item"]:checked').length == 0) {
        if ($('.js-help-redmine')) (0, _notify2.default)('danger', '请选择题目');
      }
      var self = this;

      this.$form.find('[data-role="batch-item"]:checked').each(function (index, item) {
        var questionId = $(this).val();

        if ($(this).closest('tr').data('type') == 'material') {
          self.$form.find('[data-parent-id="' + questionId + '"]').remove();
        }
        $(this).closest('tr').remove();
      });
      (0, _questionSubjective.questionSubjectiveRemask)(this.$form);
    }
  }, {
    key: 'previewQuestion',
    value: function previewQuestion(event) {
      event.preventDefault();
      window.open($(event.currentTarget).data('url'), '_blank', "directories=0,height=580,width=820,scrollbars=1,toolbar=0,status=0,menubar=0,location=0");
    }
  }, {
    key: 'refreshSeqs',
    value: function refreshSeqs() {
      var seq = 1;
      this.$form.find("tbody tr").each(function () {
        var $tr = $(this);

        if (!$tr.hasClass('have-sub-questions')) {
          $tr.find('td.seq').html(seq);
          seq++;
        }
      });

      this.$form.find('[name="questionLength"]').val(seq - 1 > 0 ? seq - 1 : null);
    }
  }]);

  return QuestionOperate;
}();

exports.default = QuestionOperate;