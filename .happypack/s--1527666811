'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DeleteAction = function () {
  function DeleteAction($element, onSuccess) {
    _classCallCheck(this, DeleteAction);

    this.$element = $element;
    this.onSuccess = onSuccess;
    this.initEvent();
  }

  _createClass(DeleteAction, [{
    key: 'initEvent',
    value: function initEvent() {
      var _this = this;

      this.$element.on('click', '[data-role="item-delete"]', function (event) {
        return _this._itemDelete(event);
      });
      this.$element.on('click', '[data-role="batch-delete"]', function (event) {
        return _this._batchDelete(event);
      });
    }
  }, {
    key: '_itemDelete',
    value: function _itemDelete(event) {
      var $btn = $(event.currentTarget);

      var name = $btn.data('name');
      var message = $btn.data('message');
      var self = this;

      if (!message) {
        message = '真的要删除该' + name + '吗？';
      }

      if (!confirm(message)) {
        return;
      }

      $.post($btn.data('url'), function () {
        if ($.isFunction(self.onSuccess)) {
          self.onSuccess.call(self.$element);
        } else {
          $btn.closest('[data-role=item]').remove();
          (0, _notify2.default)('success', "删除成功");
          window.location.reload();
        }
      });
    }
  }, {
    key: '_batchDelete',
    value: function _batchDelete(event) {
      var $btn = $(event.currentTarget);
      var name = $btn.data('name');

      var ids = [];
      this.$element.find('[data-role="batch-item"]:checked').each(function () {
        ids.push(this.value);
      });

      if (ids.length == 0) {
        (0, _notify2.default)('danger', '未选中任何' + name);
        return;
      }

      if (!confirm('确定要删除选中的条' + name + '吗？')) {
        return;
      }

      (0, _notify2.default)('info', '正在删除...');

      $.post($btn.data('url'), { ids: ids }, function () {
        window.location.reload();
      });
    }
  }]);

  return DeleteAction;
}();

exports.default = DeleteAction;