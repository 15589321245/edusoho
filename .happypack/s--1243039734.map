{"version":3,"sources":["node_modules/.1.2.7@core-js/modules/$.for-of.js"],"names":["ctx","require","call","isArrayIter","anObject","toLength","getIterFn","module","exports","iterable","entries","fn","that","iterFn","f","index","length","step","iterator","TypeError","next","done","value"],"mappings":";;AAAA,IAAIA,MAAcC,QAAQ,SAAR,CAAlB;AAAA,IACIC,OAAcD,QAAQ,eAAR,CADlB;AAAA,IAEIE,cAAcF,QAAQ,mBAAR,CAFlB;AAAA,IAGIG,WAAcH,QAAQ,eAAR,CAHlB;AAAA,IAIII,WAAcJ,QAAQ,eAAR,CAJlB;AAAA,IAKIK,YAAcL,QAAQ,4BAAR,CALlB;AAMAM,OAAOC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,OAAnB,EAA4BC,EAA5B,EAAgCC,IAAhC,EAAqC;AACpD,MAAIC,SAASP,UAAUG,QAAV,CAAb;AAAA,MACIK,IAASd,IAAIW,EAAJ,EAAQC,IAAR,EAAcF,UAAU,CAAV,GAAc,CAA5B,CADb;AAAA,MAEIK,QAAS,CAFb;AAAA,MAGIC,MAHJ;AAAA,MAGYC,IAHZ;AAAA,MAGkBC,QAHlB;AAIA,MAAG,OAAOL,MAAP,IAAiB,UAApB,EAA+B,MAAMM,UAAUV,WAAW,mBAArB,CAAN;AAC/B;AACA,MAAGN,YAAYU,MAAZ,CAAH,EAAuB,KAAIG,SAASX,SAASI,SAASO,MAAlB,CAAb,EAAwCA,SAASD,KAAjD,EAAwDA,OAAxD,EAAgE;AACrFL,cAAUI,EAAEV,SAASa,OAAOR,SAASM,KAAT,CAAhB,EAAiC,CAAjC,CAAF,EAAuCE,KAAK,CAAL,CAAvC,CAAV,GAA4DH,EAAEL,SAASM,KAAT,CAAF,CAA5D;AACD,GAFD,MAEO,KAAIG,WAAWL,OAAOX,IAAP,CAAYO,QAAZ,CAAf,EAAsC,CAAC,CAACQ,OAAOC,SAASE,IAAT,EAAR,EAAyBC,IAAhE,GAAuE;AAC5EnB,SAAKgB,QAAL,EAAeJ,CAAf,EAAkBG,KAAKK,KAAvB,EAA8BZ,OAA9B;AACD;AACF,CAZD","file":"$.for-of.js","sourceRoot":"/Users/kz/projects/edusoho","sourcesContent":["var ctx         = require('./$.ctx')\n  , call        = require('./$.iter-call')\n  , isArrayIter = require('./$.is-array-iter')\n  , anObject    = require('./$.an-object')\n  , toLength    = require('./$.to-length')\n  , getIterFn   = require('./core.get-iterator-method');\nmodule.exports = function(iterable, entries, fn, that){\n  var iterFn = getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    call(iterator, f, step.value, entries);\n  }\n};"]}