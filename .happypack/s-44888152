'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

var _webuploader = require('./fex-webuploader/webuploader.js');

var _webuploader2 = _interopRequireDefault(_webuploader);

var _Uploader = require('./fex-webuploader/Uploader.swf');

var _Uploader2 = _interopRequireDefault(_Uploader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EsWebUploader = function () {
  function EsWebUploader(option) {
    _classCallCheck(this, EsWebUploader);

    var self = this;
    var config = Object.assign({}, {
      fileSizeLimit: 2 * 1024 * 1024,
      type: '',
      fileInput: '',
      title: '上传',
      formData: {},
      accept: {
        title: 'Images',
        extensions: 'gif,jpg,jpeg,png,ico',
        mimeTypes: 'image/png,image/jpg,image/jpeg,imge/bmp,image/gif'
      },
      uploader: null,
      fileVal: 'file',
      element: $(option.element)
    }, option);

    this.onFileQueued = config.onFileQueued || this.onFileQueued;
    this.onUploadSuccess = config.onUploadSuccess || this.onUploadSuccess;

    var ele = $(config.element);
    var uploader = _webuploader2.default.create({
      swf: _Uploader2.default,
      server: app.uploadUrl, // 配置参见script_boot.html.twig
      pick: {
        id: '#' + ele.attr("id"),
        multiple: false
      },
      formData: $.extend(config.formData, {
        token: ele.data("uploadToken"),
        _csrf_token: $('meta[name=csrf-token]').attr('content')
      }),
      accept: config.accept,
      auto: true,
      fileNumLimit: 1,
      fileSizeLimit: config.fileSizeLimit
    });

    uploader.on('fileQueued', function (file) {
      console.log('fileQueued :', file);
      self.onFileQueued(file);
    });

    uploader.on('uploadSuccess', function (file, response) {
      console.log('uploadSuccess: ', file, response);
      self.onUploadSuccess(file, response);
    });
    uploader.on('uploadError', function (file, response) {
      console.log('uploadError : ', file, response);
      (0, _notify2.default)('error', '上传失败，请重试！');
    });

    uploader.on('error', function (type) {
      console.log('error : ', type);
      switch (type) {
        case "Q_EXCEED_SIZE_LIMIT":
          (0, _notify2.default)('error', '文件过大，请上传较小的文件！');
          break;
        case "Q_EXCEED_NUM_LIMIT":
          (0, _notify2.default)('error', '添加的文件数量过多！');
          break;
        case "Q_TYPE_DENIED":
          (0, _notify2.default)('error', '文件类型错误！');
          break;
        default:
          break;
      }
    });
  }

  _createClass(EsWebUploader, [{
    key: 'onFileQueued',
    value: function onFileQueued(file) {
      //override it if you need
    }
  }, {
    key: 'onUploadSuccess',
    value: function onUploadSuccess(file, response) {
      //override it if you need
    }
  }]);

  return EsWebUploader;
}();

exports.default = EsWebUploader;