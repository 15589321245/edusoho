'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _questionTypeBuilder = require('./question-type-builder');

var _questionTypeBuilder2 = _interopRequireDefault(_questionTypeBuilder);

var _copyDeny = require('./copy-deny');

var _copyDeny2 = _interopRequireDefault(_copyDeny);

var _activityEmitter = require('../../activity/activity-emitter');

var _activityEmitter2 = _interopRequireDefault(_activityEmitter);

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DoTestBase = function () {
  function DoTestBase($container) {
    _classCallCheck(this, DoTestBase);

    this.$container = $container;
    this.answers = {};
    this.usedTime = 0;
    this.$form = $container.find('form');
    this._initEvent();
    this._initUsedTimer();
    this._isCopy();
    this._alwaysSave();
  }

  _createClass(DoTestBase, [{
    key: '_initEvent',
    value: function _initEvent() {
      var _this = this;

      this.$container.on('focusin', 'textarea', function (event) {
        return _this._showEssayInputEditor(event);
      });
      this.$container.on('click', '[data-role="test-suspend"],[data-role="paper-submit"]', function (event) {
        return _this._btnSubmit(event);
      });
      this.$container.on('click', '.js-testpaper-question-list li', function (event) {
        return _this._choiceList(event);
      });
      this.$container.on('click', '*[data-anchor]', function (event) {
        return _this._quick2Question(event);
      });
      this.$container.find('.js-testpaper-question-label').on('click', 'input', function (event) {
        return _this._choiceLable(event);
      });
      this.$container.on('click', '.js-marking', function (event) {
        return _this._markingToggle(event);
      });
      this.$container.on('click', '.js-favorite', function (event) {
        return _this._favoriteToggle(event);
      });
      this.$container.on('click', '.js-analysis', function (event) {
        return _this._analysisToggle(event);
      });
      this.$container.on('blur', '[data-type="fill"]', function (event) {
        return _this.fillChange(event);
      });
    }
  }, {
    key: '_isCopy',
    value: function _isCopy() {
      var isCopy = this.$container.find('.js-testpaper-body').data('copy');
      if (isCopy) {
        new _copyDeny2.default();
      }
    }
  }, {
    key: 'fillChange',
    value: function fillChange(event) {
      var $input = $(event.currentTarget);
      this._renderBtnIndex($input.attr('name'), $input.val() ? true : false);
    }
  }, {
    key: '_markingToggle',
    value: function _markingToggle(event) {
      var $current = $(event.currentTarget).addClass('hidden');
      $current.siblings('.js-marking.hidden').removeClass('hidden');
      var id = $current.closest('.js-testpaper-question').attr('id');

      $('[data-anchor="#' + id + '"]').find('.js-marking-card').toggleClass("hidden");
    }
  }, {
    key: '_favoriteToggle',
    value: function _favoriteToggle(event) {
      var $current = $(event.currentTarget);
      var targetType = $current.data('targetType');
      var targetId = $current.data('targetId');

      $.post($current.data('url'), { targetType: targetType, targetId: targetId }, function (response) {
        $current.addClass('hidden').siblings('.js-favorite.hidden').data('url', response.url);
        $current.addClass('hidden').siblings('.js-favorite.hidden').removeClass('hidden');
      }).error(function (response) {
        (0, _notify2.default)('error', response.error.message);
      });
    }
  }, {
    key: '_analysisToggle',
    value: function _analysisToggle(event) {
      var $current = $(event.currentTarget);
      $current.addClass('hidden');
      $current.siblings('.js-analysis.hidden').removeClass('hidden');
      $current.closest('.js-testpaper-question').find('.js-testpaper-question-analysis').slideToggle();
    }
  }, {
    key: '_initUsedTimer',
    value: function _initUsedTimer() {
      var self = this;
      this.$usedTimer = window.setInterval(function () {
        self.usedTime += 1;
      }, 1000);
    }
  }, {
    key: '_choiceLable',
    value: function _choiceLable(event) {
      var $target = $(event.currentTarget);
      var $lableContent = $target.closest('.js-testpaper-question-label');
      this.changeInput($lableContent, $target);
    }
  }, {
    key: '_choiceList',
    value: function _choiceList(event) {
      var $target = $(event.currentTarget);
      var index = $target.index();
      var $lableContent = $target.closest('.js-testpaper-question').find('.js-testpaper-question-label');
      var $input = $lableContent.find('label').eq(index).find('input');
      $input.prop('checked', !$input.prop('checked')).change();
      this.changeInput($lableContent, $input);
    }
  }, {
    key: 'changeInput',
    value: function changeInput($lableContent, $input) {
      var num = 0;
      $lableContent.find('label').each(function (index, item) {
        if ($(item).find('input').prop('checked')) {
          $(item).addClass('active');
          num++;
        } else {
          $(item).removeClass('active');
        }
      });
      var questionId = $input.attr('name');
      this._renderBtnIndex(questionId, num > 0 ? true : false);
    }
  }, {
    key: '_renderBtnIndex',
    value: function _renderBtnIndex(idNum) {
      var done = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var doing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var $btn = $('[data-anchor="#question' + idNum + '"]');
      if (done) {
        $btn.addClass('done');
      } else {
        $btn.removeClass('done');
      }
      if (doing) {
        $btn.addClass('doing').siblings('.doing').removeClass('doing');
      } else {
        $btn.removeClass('doing');
      }
    }
  }, {
    key: '_showEssayInputEditor',
    value: function _showEssayInputEditor(event) {
      var _this2 = this;

      var $shortTextarea = $(event.currentTarget);

      if ($shortTextarea.hasClass('essay-input-short')) {

        event.preventDefault();
        event.stopPropagation();
        $(this).blur();
        var $longTextarea = $shortTextarea.siblings('.essay-input-long');
        var $textareaBtn = $longTextarea.siblings('.essay-input-btn');

        $shortTextarea.hide();
        $longTextarea.show();
        $textareaBtn.show();

        var editor = CKEDITOR.replace($longTextarea.attr('id'), {
          toolbar: 'Minimal',
          filebrowserImageUploadUrl: $longTextarea.data('imageUploadUrl')
        });

        editor.on('blur', function (e) {
          editor.updateElement();
          setTimeout(function () {
            $longTextarea.val(editor.getData());
            $longTextarea.change();
            $longTextarea.val() ? _this2._renderBtnIndex($longTextarea.attr('name'), true) : _this2._renderBtnIndex($longTextarea.attr('name'), false);
          }, 1);
        });

        editor.on('instanceReady', function (e) {
          this.focus();

          $textareaBtn.one('click', function () {
            $shortTextarea.val($(editor.getData()).text());
            editor.destroy();
            $longTextarea.hide();
            $textareaBtn.hide();
            $shortTextarea.show();
          });
        });

        editor.on('key', function () {
          editor.updateElement();
          setTimeout(function () {
            $longTextarea.val(editor.getData());
            $longTextarea.change();
          }, 1);
        });

        editor.on('insertHtml', function (e) {
          editor.updateElement();
          setTimeout(function () {
            $longTextarea.val(editor.getData());
            $longTextarea.change();
          }, 1);
        });
      }
    }
  }, {
    key: '_quick2Question',
    value: function _quick2Question(event) {
      var $target = $(event.currentTarget);
      var position = $($target.data('anchor')).offset();
      $(document).scrollTop(position.top - 55);
    }
  }, {
    key: '_btnSubmit',
    value: function _btnSubmit(event) {
      var $target = $(event.currentTarget);
      $target.button('loading');
      this._submitTest($target.data('url'), $target.data('goto'));
    }
  }, {
    key: '_submitTest',
    value: function _submitTest(url) {
      var toUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      var values = {};
      var emitter = new _activityEmitter2.default();

      $('*[data-type]').each(function (index) {
        var questionId = $(this).attr('name');
        var type = $(this).data('type');
        var questionTypeBuilder = _questionTypeBuilder2.default.getTypeBuilder(type);
        var answer = questionTypeBuilder.getAnswer(questionId);
        values[questionId] = answer;
      });

      $.post(url, { data: values, usedTime: this.usedTime }).done(function (response) {
        if (response.result) {
          emitter.emit('finish');
        }

        if (toUrl != '' || response.goto != '') {
          window.location.href = toUrl;
        } else if (response.goto != '') {
          window.location.href = response.goto;
        } else if (response.message != '') {
          (0, _notify2.default)('error', response.message);
        }
      }).error(function (response) {
        (0, _notify2.default)('error', response.error.message);
      });
    }
  }, {
    key: '_alwaysSave',
    value: function _alwaysSave() {
      if ($('input[name="testSuspend"]').length > 0) {
        var self = this;
        var url = $('input[name="testSuspend"]').data('url');
        setInterval(function () {
          self._submitTest(url);
          var currentTime = new Date().getHours() + ':' + new Date().getMinutes() + ':' + new Date().getSeconds();
          (0, _notify2.default)('success', currentTime + ' 已保存');
        }, 5 * 60 * 1000);
      }
    }
  }]);

  return DoTestBase;
}();

//临时方案，libs/vendor.js这个方法没有起作用
/*$(document).ajaxSend(function(a, b, c) {
  if (c.type == 'POST') {
    b.setRequestHeader('X-CSRF-Token', $('meta[name=csrf-token]').attr('content'));
  }
});*/

exports.default = DoTestBase;