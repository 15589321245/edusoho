'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _multiInput = require('../multi-input');

var _multiInput2 = _interopRequireDefault(_multiInput);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function initItem(dataSourceUi, data, index, props) {
  var _outputValue;

  var obj = {
    itemId: Math.random(),
    nickname: data[props.nickname],
    isVisible: data[props.isVisible] == 1 ? true : false,
    avatar: data[props.avatar],
    seq: index,
    id: data[props.id],
    outputValue: (_outputValue = {}, _defineProperty(_outputValue, props.id, data[props.id]), _defineProperty(_outputValue, props.isVisible, data[props.isVisible]), _outputValue)
  };
  dataSourceUi.push(obj);
}

function updateChecked(dataSourceUi, id) {
  dataSourceUi.map(function (item, index) {
    if (item.itemId == id) {
      dataSourceUi[index].isVisible = !dataSourceUi[index].isVisible;
      dataSourceUi[index].outputValue.isVisible = dataSourceUi[index].isVisible ? 1 : 0;
    }
  });
}

var PersonaMultiInput = function (_MultiInput) {
  _inherits(PersonaMultiInput, _MultiInput);

  function PersonaMultiInput(props) {
    _classCallCheck(this, PersonaMultiInput);

    var _this = _possibleConstructorReturn(this, (PersonaMultiInput.__proto__ || Object.getPrototypeOf(PersonaMultiInput)).call(this, props));

    _this.onChecked = function (event) {
      var id = event.currentTarget.value;
      updateChecked(_this.state.dataSourceUi, id);
      _this.setState({
        dataSourceUi: _this.state.dataSourceUi
      });
    };

    _this.addItem = function (value, data) {
      if (!data) {
        return;
      }
      //@TODO重复添加提示
      if (_this.props.replaceItem) {
        _this.state.dataSourceUi = [];
      }
      initItem(_this.state.dataSourceUi, data, _this.state.dataSourceUi.length + 1, _this.props);

      _this.setState({
        dataSourceUi: _this.state.dataSourceUi
      });
    };

    return _this;
  }

  _createClass(PersonaMultiInput, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this.state = {
        dataSourceUi: []
      };
      this.props.dataSource.map(function (item, index) {
        initItem(_this2.state.dataSourceUi, item, index + 1, _this2.props);
      });
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        removeItem: this.removeItem,
        sortItem: this.sortItem,
        addItem: this.addItem,
        onChecked: this.onChecked
      };
    }
  }, {
    key: 'getList',
    value: function getList() {
      return _react2.default.createElement(_list2.default, { listClassName: this.props.listClassName, dataSourceUi: this.state.dataSourceUi, sortable: this.props.sortable, showCheckbox: this.props.showCheckbox, showDeleteBtn: this.props.showDeleteBtn });
    }
  }]);

  return PersonaMultiInput;
}(_multiInput2.default);

exports.default = PersonaMultiInput;


PersonaMultiInput.propTypes = _extends({}, _multiInput2.default.propTypes, {
  id: _react2.default.PropTypes.string,
  nickname: _react2.default.PropTypes.string,
  avatar: _react2.default.PropTypes.string,
  isVisible: _react2.default.PropTypes.string,
  replaceItem: _react2.default.PropTypes.bool,
  showCheckbox: _react2.default.PropTypes.bool,
  showDeleteBtn: _react2.default.PropTypes.bool
});

PersonaMultiInput.defaultProps = _extends({}, _multiInput2.default.defaultProps, {
  id: 'id',
  nickname: 'nickname',
  avatar: 'avatar',
  isVisible: 'isVisible',
  replaceItem: false,
  showCheckbox: true,
  showDeleteBtn: true
});

PersonaMultiInput.childContextTypes = _extends({}, _multiInput2.default.childContextTypes, {
  onChecked: _react2.default.PropTypes.func
});