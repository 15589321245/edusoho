'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TaskUi = function () {
  function TaskUi(option) {
    _classCallCheck(this, TaskUi);

    this.element = $(option.element);
    this.learningPrompt = this.element.find('.js-learning-prompt');
    this.learnedPrompt = this.element.find('.js-learned-prompt');
    this.learnprompt = this.element.find('.js-learn-prompt');
    this.btnLearn = this.element.find('.js-btn-learn');
  }

  _createClass(TaskUi, [{
    key: 'learnedWeakPrompt',
    value: function learnedWeakPrompt() {
      var _this = this;

      console.log();
      this.learnprompt.removeClass('open');
      this.learningPrompt.addClass('moveup');
      window.setTimeout(function () {
        _this.learningPrompt.removeClass('moveup');
        _this.learnedPrompt.addClass('moveup');
      }, 2000);
    }
  }, {
    key: 'learned',
    value: function learned() {
      this.btnLearn.addClass('active');
    }
  }]);

  return TaskUi;
}();

exports.default = TaskUi;