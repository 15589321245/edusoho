'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThemeManage = function () {
  function ThemeManage($contentEle, $config, $allConfig, $iframe) {
    _classCallCheck(this, ThemeManage);

    this.element = $contentEle;
    this.config = $config;
    this.allConfig = $allConfig;
    this.currentIframe = $iframe;
    this.currentItem = null;

    this.leftBlock = this.element.find('.theme-custom-left-block');
    this.rightBlock = this.element.find('.theme-custom-right-block');
    this.bottomBlock = this.element.find('.theme-custom-bottom-block');
    this.colorBlock = this.element.find('.theme-custom-color-block');
    this.init();
  }

  _createClass(ThemeManage, [{
    key: 'init',
    value: function init() {
      this._setupBlockConfig();
      this._setupBottomConfig();
      this._setupColorConfig();
    }
  }, {
    key: 'getElement',
    value: function getElement() {
      return $(this.element);
    }
  }, {
    key: 'setCurrentItem',
    value: function setCurrentItem($item) {
      this.currentItem = $item;
    }
  }, {
    key: 'getCurrentItem',
    value: function getCurrentItem() {
      return this.currentItem;
    }
  }, {
    key: 'saveBlock',
    value: function saveBlock() {
      this._saveConfig();
      this._send();
    }
  }, {
    key: 'saveSort',
    value: function saveSort() {
      this._saveConfig();
      this._sendSort();
    }
  }, {
    key: '_saveConfig',
    value: function _saveConfig() {
      var configs = { color: '', blocks: { left: [], right: [] }, bottom: '' };

      configs.blocks.left = this._getBlockConfig(this.leftBlock);
      configs.blocks.right = this._getBlockConfig(this.rightBlock);
      configs.bottom = this._getBottomConfig(this.bottomBlock);
      configs.color = this._getColorConfig(this.colorBlock);
      this.config = configs;
    }
  }, {
    key: '_setupBlockConfig',
    value: function _setupBlockConfig() {
      var self = this;
      this.leftBlock.find('li').each(function (index, value) {
        if ($(this).find('.check-block').prop('checked') == true) {
          $(this).data('config', self.config.blocks.left[index]);
        } else {
          var itemConfig = self._getConfigfromAllConfig($(this).attr('id'), self.allConfig.blocks.left);
          $(this).data('config', itemConfig);
        }
      });
      this.rightBlock.find('li').each(function (index, value) {
        if ($(this).find('.check-block').prop('checked') == true) {
          $(this).data('config', self.config.blocks.right[index]);
        } else {
          var itemConfig = self._getConfigfromAllConfig($(this).attr('id'), self.allConfig.blocks.right);
          $(this).data('config', itemConfig);
        }
      });
    }
  }, {
    key: '_setupBottomConfig',
    value: function _setupBottomConfig() {
      this.bottomBlock.find('input[type=radio][value=' + this.config.bottom + ']').prop('checked', true);
    }
  }, {
    key: '_setupColorConfig',
    value: function _setupColorConfig() {
      this.colorBlock.find('input[type=radio][value=' + this.config.color + ']').prop('checked', true);
    }
  }, {
    key: '_getBlockConfig',
    value: function _getBlockConfig($block) {
      var config = [];
      $block.find('input[type=checkbox]:checked').each(function () {
        config.push($(this).parents('li').data('config'));
      });

      return config;
    }
  }, {
    key: '_getBottomConfig',
    value: function _getBottomConfig($block) {
      return $block.find('input[type=radio]:checked').val();
    }
  }, {
    key: '_getColorConfig',
    value: function _getColorConfig($block) {
      return $block.find('input[type=radio]:checked').val();
    }
  }, {
    key: '_send',
    value: function _send() {
      var $iframe = this.currentIframe;
      var currentData = $('#' + $(this.currentItem).attr('id')).data('config');
      var isChoiced = $('#' + $(this.currentItem).attr('id')).find('.check-block').prop('checked');

      $.post(this.element.data('url'), { config: this.config, currentData: currentData }, function (html) {

        $('#' + $(html).attr('id')).replaceWith($(html));
        $('#' + $(html).attr('id')).data('config', currentData);
        if (isChoiced) {
          $('#' + $(html).attr('id')).find('.check-block').prop('checked', true);
          $('#' + $(html).attr('id')).find('.item-edit-btn').show();
        }
        var src = $iframe.attr('src') + "?t=" + Date.parse(new Date());
        $iframe.attr('src', src);
      });
    }
  }, {
    key: '_sendSort',
    value: function _sendSort() {
      var $iframe = this.currentIframe;

      $.post(this.element.data('url'), { config: this.config }, function (html) {
        var src = $iframe.attr('src') + "?t=" + Date.parse(new Date());
        $iframe.attr('src', src);
      });
    }
  }, {
    key: '_getConfigfromAllConfig',
    value: function _getConfigfromAllConfig(id, allConfig) {
      for (var itemConfig in allConfig) {
        if (allConfig[itemConfig].id == id) {
          return allConfig[itemConfig];
        }
      }
    }
  }]);

  return ThemeManage;
}();

exports.default = ThemeManage;