"use strict";

var _esEventEmitter = require("common/es-event-emitter");

var _esEventEmitter2 = _interopRequireDefault(_esEventEmitter);

var _activityEmitter = require("../activity-emitter");

var _activityEmitter2 = _interopRequireDefault(_activityEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Text = function (_Emitter) {
  _inherits(Text, _Emitter);

  function Text(_ref) {
    var element = _ref.element;

    _classCallCheck(this, Text);

    var _this = _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this));

    _this.element = $(element);
    _this.element.perfectScrollbar();
    console.log();
    _this.emitter = new _activityEmitter2.default();
    _this.emitter.receive('doing', function (data) {
      var finishTime = parseInt(_this.element.data('finishTime'));
      if (!finishTime) {
        return;
      }
      if (data.learnedTime >= finishTime) {
        _this.emitter.emit('finish');
      }
    });
    return _this;
  }

  return Text;
}(_esEventEmitter2.default);

new Text({
  element: '#text-activity'
});