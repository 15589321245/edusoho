{"version":3,"sources":["app/Resources/static-src/app/js/task/widget/task-pipe.js"],"names":["TaskPipe","element","$","eventUrl","data","undefined","Error","eventDatas","intervalId","lastTime","eventMap","receives","_registerChannel","_initInterval","instanceId","fedx","addFilter","channel","topic","direction","subscribe","callback","event","_flush","window","onbeforeunload","_clearInterval","minute","setInterval","clearInterval","Object","assign","ajax","post","events","done","response","_publishResponse","result","status","listners","i","length","listner","fail","error","publish","push"],"mappings":"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","file":"task-pipe.js","sourceRoot":"/Users/kz/projects/edusoho","sourcesContent":["import postal from 'postal';\nimport 'postal.federation';\nimport 'postal.xframe';\n\nexport default class TaskPipe {\n  constructor(element) {\n    this.element = $(element);\n    this.eventUrl = this.element.data('eventUrl');\n    if (this.eventUrl === undefined) {\n      throw Error('task event url is undefined');\n    }\n\n    this.eventDatas = {};\n    this.intervalId = null;\n    this.lastTime = this.element.data('lastTime');\n    this.eventMap = {\n      receives: {}\n    };\n\n    this._registerChannel();\n    this._initInterval();\n  }\n\n  _registerChannel(){\n    postal.instanceId('task');\n\n    postal.fedx.addFilter([\n      {\n        channel: 'activity-events', //接收 activity iframe的事件\n        topic: '#',\n        direction: 'in'\n      },\n      {\n        channel: 'task-events',  // 发送事件到activity iframe\n        topic: '#',\n        direction: 'out'\n      }\n    ]);\n\n    postal.subscribe({\n      channel: 'activity-events',\n      topic: '#',\n      callback: ({event, data}) => {\n        this.eventDatas[event] = data;\n        this._flush();\n      }\n    });\n\n    return this;\n  }\n\n  _initInterval() {\n    window.onbeforeunload = () => {  \n      this._clearInterval(); \n      this._flush();\n    } \n    this._clearInterval();\n    let minute = 60 * 1000*4;\n    this.intervalId = setInterval(() => this._flush(), minute);\n  }\n\n  _clearInterval() {\n    clearInterval(this.intervalId);\n  }\n\n  _flush() {\n    Object.assign(this.eventDatas, {\n      'stay': {\n        'lastTime': this.lastTime\n      }\n    });\n\n    let ajax = $.post(this.eventUrl, {data: {lastTime: this.lastTime, events: this.eventDatas}})\n      .done((response) => {\n        this._publishResponse(response);\n        this.eventDatas = {};\n        this.lastTime = response.lastTime;\n        if(response.result.status) {\n          let listners = this.eventMap.receives[response.result.status];\n          if(listners) {\n            for (var i = listners.length - 1; i >= 0; i--) {\n              let listner = listners[i];\n              listner(response);\n            }\n          }\n        }\n      })\n      .fail((error) => {\n      });\n\n    return ajax;\n  }\n\n  _publishResponse(response) {\n    postal.publish({\n      channel: 'task-events',\n      topic: '#',\n      data: { event: response.event, data: response.data }\n    });\n  }\n\n  addListener(event, callback) {\n    this.eventMap.receives[event] = this.eventMap.receives[event] || [];\n    this.eventMap.receives[event].push(callback);\n  }\n}\n"]}