'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fileChoose = require('../../file-chooser/file-choose');

var _fileChoose2 = _interopRequireDefault(_fileChoose);

var _dialog = require('./subtitle/dialog');

var _dialog2 = _interopRequireDefault(_dialog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Video = function () {
  function Video() {
    _classCallCheck(this, Video);

    this.showChooseContent();
    this.inItStep2form();
    this.isInItStep3from();
    this.autoValidatorLength();
  }

  _createClass(Video, [{
    key: 'showChooseContent',
    value: function showChooseContent() {
      $('#iframe-content').on('click', '.js-choose-trigger', function (event) {
        _fileChoose2.default.openUI();
        $('[name="ext[mediaSource]"]').val(null);
      });
    }
  }, {
    key: 'inItStep2form',
    value: function inItStep2form() {
      var $step2_form = $('#step2-form');
      var validator = $step2_form.data('validator');
      $step2_form.validate({
        groups: {
          date: 'minute second'
        },
        rules: {
          title: {
            required: true,
            maxlength: 50,
            trim: true
          },
          minute: 'required unsigned_integer',
          second: 'required second_range',
          'ext[mediaSource]': 'required',
          'ext[finishDetail]': 'unsigned_integer'
        },
        messages: {
          minute: {
            required: '请输入时长'
          },
          second: {
            required: '请输入时长',
            second_range: '秒数只能在0-59之间'
          },
          'ext[mediaSource]': "请上传或选择%display%"
        }
      });
      $step2_form.data('validator', validator);
    }
  }, {
    key: 'inItStep3from',
    value: function inItStep3from() {
      var $step3_forom = $('#step3-form');
      var validator = $step3_forom.data('validator');
      $step3_forom.validate({
        rules: {
          'ext[finishDetail]': {
            required: true,
            positive_integer: true,
            max: 300,
            min: 1
          }
        },
        messages: {
          'ext[finishDetail]': {
            required: '请输入时长'
          }
        }
      });
      $step3_forom.data('validator', validator);
    }
  }, {
    key: 'autoValidatorLength',
    value: function autoValidatorLength() {
      $(".js-length").blur(function () {
        var validator = $("#step2-form").data('validator');
        if (validator && validator.form()) {
          var minute = parseInt($('#minute').val()) | 0;
          var second = parseInt($('#second').val()) | 0;
          $("#length").val(minute * 60 + second);
        }
      });
    }
  }, {
    key: 'isInItStep3from',
    value: function isInItStep3from() {
      // 完成条件是观看时长的情况
      if ($("#finish-condition").children('option:selected').val() === 'time') {
        $('.viewLength').removeClass('hidden');
        _inItStep3from();
      }

      $("#finish-condition").on('change', function (event) {
        if (event.target.value == 'time') {
          $('.viewLength').removeClass('hidden');
          _inItStep3from();
        } else {
          $('.viewLength').addClass('hidden');
          $('input[name="ext[finishDetail]"]').rules('remove');
        }
      });
    }
  }, {
    key: 'fileChooser',
    value: function fileChooser() {
      var fileChooser = new _fileChoose2.default();
      //字幕组件
      var subtitleDialog = new _dialog2.default('.js-subtitle-list');

      var onSelectFile = function onSelectFile(file) {
        _fileChoose2.default.closeUI();
        if (file.length && file.length > 0) {
          var minute = parseInt(file.length / 60);
          var second = Math.round(file.length % 60);
          $("#minute").val(minute);
          $("#second").val(second);
          $("#length").val(minute * 60 + second);
        }

        $('[name="ext[mediaSource]"]').val(file.source);
        if (file.source == 'self') {
          $("#ext_mediaId").val(file.id);
          $("#ext_mediaUri").val('');
        } else {
          $("#ext_mediaUri").val(file.uri);
          $("#ext_mediaId").val(0);
        }

        //渲染字幕
        subtitleDialog.render(file);
      };

      fileChooser.on('select', onSelectFile);
    }
  }]);

  return Video;
}();