'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _help = require('../help');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Marketing = function () {
  function Marketing() {
    _classCallCheck(this, Marketing);

    this.init();
  }

  _createClass(Marketing, [{
    key: 'init',
    value: function init() {
      $('.js-task-price-setting').perfectScrollbar();
      var $form = $('#course-marketing-form');
      $('.js-task-price-setting').perfectScrollbar();
      (0, _help.TabChange)();
      var validator = $form.validate({
        onkeyup: false,
        rules: {
          originPrice: {
            required: function required() {
              return $("[name=isFree]:checked").val() == 0;
            },
            currency: function currency() {
              return $("[name=isFree]:checked").val() == 0;
            }
          },
          tryLookLength: {
            digits: true,
            min: 1,
            max: 10
          },
          tryLookLimit: {
            digits: true
          },
          buyExpiryTime: {
            required: function required() {
              console.log($('input[name="enableBuyExpiryTime"]:checked').val() == 1);
              return $('input[name="enableBuyExpiryTime"]:checked').val() == 1;
            },
            date: true,
            feature: true
          }
        },
        messages: {
          buyExpiryTime: {
            required: '请选择有效的购买截止日期',
            date: '请选择有效的购买截止日期'
          }
        }
      });

      $.validator.addMethod("feature", function (value, element, params) {
        return value && new Date(value).getTime() > Date.now();
      }, Translator.trans('购买截止时间需在当前时间之后'));

      $('.js-task-price-setting').on('click', 'li', function (event) {
        var $li = $(this).toggleClass('open');
        var $input = $li.find('input');
        $input.prop("checked", !$input.is(":checked"));
      });

      $('.js-task-price-setting').on('click', 'input', function (event) {
        event.stopPropagation();
        var $input = $(this);
        $input.closest('li').toggleClass('open');
      });

      $('input[name="isFree"]').on('change', function (event) {
        if ($('input[name="isFree"]:checked').val() == 0) {
          $('.js-is-free').removeClass('hidden');
        } else {
          $('.js-is-free').addClass('hidden');
        }
      });

      $('input[name="enableBuyExpiryTime"]').on('change', function (event) {
        if ($('input[name="enableBuyExpiryTime"]:checked').val() == 0) {
          $('#buyExpiryTime').addClass('hidden');
        } else {
          $('#buyExpiryTime').removeClass('hidden');
        }
      });

      $('input[name="buyExpiryTime"]').datetimepicker({
        format: 'yyyy-mm-dd',
        language: "zh",
        minView: 2, //month
        autoclose: true,
        endDate: new Date(Date.now() + 86400 * 365 * 100 * 1000)
      });
      $('input[name="buyExpiryTime"]').datetimepicker('setStartDate', new Date(Date.now() + 86400 * 1000));

      $('input[name="tryLookable"]').on('change', function (event) {
        console.log('tryLook : ', $('input[name="tryLookable"]:checked').val());
        if ($('input[name="tryLookable"]:checked').val() == 1) {
          $('.js-enable-try-look').removeClass('hidden');
          $('#tryLookLength').val('1');
        } else {
          $('.js-enable-try-look').addClass('hidden');
        }
      });

      $('.js-service-item').click(function (event) {
        var $item = $(event.currentTarget);
        var $values = $('#course_services').val();
        if (!$values) {
          values = [];
        }
        $values = JSON.parse($values);
        if ($item.hasClass('label-primary')) {
          $item.removeClass('label-primary');
          $item.addClass('label-default');
          $values.splice($values.indexOf($item.text()), 1);
        } else {
          $item.removeClass('label-default');
          $item.addClass('label-primary');
          $values.push($item.text());
        }
        $('#course_services').val(JSON.stringify($values));
      });

      $('#course-submit').click(function (evt) {
        if (validator.form()) {
          $form.submit();
        }
      });
    }
  }]);

  return Marketing;
}();

new Marketing();