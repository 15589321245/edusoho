"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _esImageCrop = require("libs/js/es-image-crop.js");

var _esImageCrop2 = _interopRequireDefault(_esImageCrop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var imageCrop = new _esImageCrop2.default({
  element: "#classroom-picture-crop",
  group: "course",
  cropedWidth: 525,
  cropedHeight: 350
});
imageCrop.afterCrop = function (response) {
  var url = $("#upload-picture-btn").data("url");
  $.post(url, { images: response }, function () {
    document.location.href = $("#upload-picture-btn").data("gotoUrl");
  });
};

$("#upload-picture-btn").click(function (e) {
  e.stopPropagation();
  imageCrop.crop({
    imgs: {
      large: [525, 350],
      middle: [345, 230],
      small: [213, 142]
    }
  });
});

$('.go-back').click(function () {
  history.go(-1);
});

var CoverCrop = function () {
  function CoverCrop() {
    _classCallCheck(this, CoverCrop);

    this.init();
  }

  _createClass(CoverCrop, [{
    key: "init",
    value: function init() {}
  }]);

  return CoverCrop;
}();

new CoverCrop();