{"version":3,"sources":["webpack:///./app/Resources/static-src/app/js/settings/avatar-crop-modal/index.js"],"names":["CoverCrop","props","element","avatarCrop","saveBtn","init","imageCrop","initEvent","$","on","event","stopPropagation","$this","currentTarget","crop","imgs","large","medium","small","button","cropedWidth","cropedHeight","afterCrop","response","$saveBtn","url","data","post","images","status","val","avatar","attr","blur","modal","Translator","trans"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;KAEMA,S;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AACjB,UAAKC,OAAL,GAAeD,MAAMC,OAArB;AACA,UAAKC,UAAL,GAAkBF,MAAME,UAAxB;AACA,UAAKC,OAAL,GAAeH,MAAMG,OAArB;AACA,UAAKC,IAAL;AACD;;;;4BAEM;AACL,WAAIC,YAAY,KAAKA,SAAL,EAAhB;AACA,YAAKC,SAAL,CAAeD,SAAf;AACD;;;+BAESA,S,EAAW;AACnBE,SAAE,KAAKJ,OAAP,EAAgBK,EAAhB,CAAmB,OAAnB,EAA4B,UAACC,KAAD,EAAW;AACrCA,eAAMC,eAAN;AACA,aAAMC,QAAQJ,EAAEE,MAAMG,aAAR,CAAd;;AAEAP,mBAAUQ,IAAV,CAAe;AACbC,iBAAM;AACJC,oBAAO,CAAC,GAAD,EAAM,GAAN,CADH;AAEJC,qBAAQ,CAAC,GAAD,EAAM,GAAN,CAFJ;AAGJC,oBAAO,CAAC,EAAD,EAAK,EAAL;AAHH;AADO,UAAf;;AAQAN,eAAMO,MAAN,CAAa,SAAb;AACD,QAbD;AAcD;;;iCAEW;AAAA;;AACV,WAAIb,YAAY,0BAAgB;AAC9BJ,kBAAS,KAAKC,UADgB;AAE9BiB,sBAAa,GAFiB;AAG9BC,uBAAc;AAHgB,QAAhB,CAAhB;;AAMAf,iBAAUgB,SAAV,GAAsB,UAACC,QAAD,EAAc;AAClC,aAAIC,WAAWhB,EAAE,MAAKJ,OAAP,CAAf;;AAEA,aAAIqB,MAAMD,SAASE,IAAT,CAAc,KAAd,CAAV;;AAEAlB,WAAEmB,IAAF,CAAOF,GAAP,EAAY,EAAEG,QAAQL,QAAV,EAAZ,EAAkC,UAACA,QAAD,EAAc;AAC9C,eAAIA,SAASM,MAAT,KAAoB,SAAxB,EAAmC;AACjCrB,eAAE,iBAAF,EAAqBsB,GAArB,CAAyBP,SAASQ,MAAlC;AACAvB,eAAE,wBAAF,EAA4BwB,IAA5B,CAAiC,KAAjC,EAAwCT,SAASQ,MAAjD;AACAvB,eAAE,iBAAF,EAAqByB,IAArB;AACAzB,eAAE,QAAF,EAAY0B,KAAZ,CAAkB,MAAlB;;AAEA,mCAAO,SAAP,EAAiBC,WAAWC,KAAX,CAAiB,0BAAjB,CAAjB;AACD,YAPD,MAOO;AACL,mCAAO,QAAP,EAAgBD,WAAWC,KAAX,CAAiB,wBAAjB,CAAhB;AACAZ,sBAASL,MAAT,CAAgB,OAAhB;AACD;AACF,UAZD;AAaD,QAlBD;AAmBA,cAAOb,SAAP;AACD;;;;;;AAIH,KAAIN,SAAJ,CAAc;AACZE,YAAS,mBADG;AAEZC,eAAY,cAFA;AAGZC,YAAS;AAHG,EAAd,E","file":"app/js/settings/avatar-crop-modal/index.js","sourcesContent":["import EsImageCrop from 'common/es-image-crop';\nimport notify from 'common/notify';\n\nclass CoverCrop {\n  constructor(props) {\n    this.element = props.element;\n    this.avatarCrop = props.avatarCrop;\n    this.saveBtn = props.saveBtn;\n    this.init();\n  }\n\n  init() {\n    let imageCrop = this.imageCrop();\n    this.initEvent(imageCrop);\n  }\n\n  initEvent(imageCrop) {\n    $(this.saveBtn).on('click', (event) => {\n      event.stopPropagation();\n      const $this = $(event.currentTarget);\n\n      imageCrop.crop({\n        imgs: {\n          large: [200, 200],\n          medium: [120, 120],\n          small: [48, 48]\n        }\n      });\n\n      $this.button('loading');\n    });\n  }\n\n  imageCrop() {\n    let imageCrop = new EsImageCrop({\n      element: this.avatarCrop,\n      cropedWidth: 200,\n      cropedHeight: 200\n    });\n\n    imageCrop.afterCrop = (response) => {\n      let $saveBtn = $(this.saveBtn);\n      \n      let url = $saveBtn.data('url');\n      \n      $.post(url, { images: response }, (response) => {\n        if (response.status === 'success') {\n          $(\"#profile_avatar\").val(response.avatar);\n          $(\"#user-profile-form img\").attr('src', response.avatar);\n          $(\"#profile_avatar\").blur();\n          $(\"#modal\").modal('hide');\n          \n          notify('success',Translator.trans('site.upload_success_hint'));\n        } else {\n          notify('danger',Translator.trans('upload_fail_retry_hint'));\n          $saveBtn.button('reset');\n        }\n      });\n    }\n    return imageCrop\n  }\n\n}\n\nnew CoverCrop({\n  element: '#avatar-crop-form',\n  avatarCrop: '#avatar-crop',\n  saveBtn: '#upload-avatar-btn',\n})\n\n\n\n// WEBPACK FOOTER //\n// ./app/Resources/static-src/app/js/settings/avatar-crop-modal/index.js"],"sourceRoot":""}