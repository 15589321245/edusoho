"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _editor = require("../editor");

require("store");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Text = function () {
  function Text(props) {
    _classCallCheck(this, Text);

    this._init();
  }

  _createClass(Text, [{
    key: "_init",
    value: function _init() {
      var _this = this;

      this._inItStep2form();
      this._inItStep3form();
      this._lanuchAutoSave();

      $('.js-continue-edit').on('click', function (event) {
        var $btn = $(event.currentTarget);
        var content = $btn.data('content');
        _this.editor.setData(content);
        $btn.remove();
      });
    }
  }, {
    key: "_inItStep2form",
    value: function _inItStep2form() {
      var $step2_form = $('#step2-form');
      var validator = $step2_form.data('validator');
      validator = $step2_form.validate({
        rules: {
          title: {
            required: true,
            maxlength: 50,
            trim: true
          },
          content: {
            required: true
          }
        }
      });
      var $content = $('[name="content"]');
      this.editor = (0, _editor.initEditor)($content, validator);
      this._contentCache = $content.val();
    }
  }, {
    key: "_lanuchAutoSave",
    value: function _lanuchAutoSave() {
      var _this2 = this;

      var $title = $('#modal .modal-title', parent.document);
      this._originTitle = $title.text();
      setInterval(function () {
        _this2._saveDraft();
      }, 5000);
    }
  }, {
    key: "_saveDraft",
    value: function _saveDraft() {
      var _this3 = this;

      var content = this.editor.getData();
      var needSave = content !== this._contentCache;
      if (!needSave) {
        return;
      }
      var $content = $('[name="content"]');
      $.post($content.data('saveDraftUrl'), { content: content }).done(function () {
        var date = new Date(); //日期对象
        var $title = $('#modal .modal-title', parent.document);
        var now = "" + (date.getHours() + Translator.trans('时')) + (date.getMinutes() + Translator.trans('分')) + (date.getSeconds() + Translator.trans('秒'));
        $title.text(_this3._originTitle + Translator.trans('(草稿已于%createdTime%保存)', { createdTime: now }));
        _this3._contentCache = content;
      });
    }
  }, {
    key: "_inItStep3form",
    value: function _inItStep3form() {
      var $step3_form = $('#step3-form');
      var validator = $step3_form.data('validator');
      validator = $step3_form.validate({
        rules: {
          finishDetail: {
            required: true,
            positive_integer: true,
            max: 300
          }
        },
        messages: {
          finishDetail: {
            required: '请输入至少观看多少分钟'
          }
        }
      });
    }
  }]);

  return Text;
}();

new Text();