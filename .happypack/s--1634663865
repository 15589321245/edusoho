'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('jquery-jcrop/js/jquery.Jcrop.js');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EsImageCrop = function () {
  function EsImageCrop(config) {
    _classCallCheck(this, EsImageCrop);

    var self = this;
    this.config = $.extend({
      element: null,
      group: 'default'
    }, config);

    this.element = $(this.config.element);
    var $picture = this.element;
    var scaledWidth = $picture.attr('width'),
        scaledHeight = $picture.attr('height'),
        naturalWidth = $picture.data('naturalWidth'),
        naturalHeight = $picture.data('naturalHeight'),
        cropedWidth = this.config.cropedWidth,
        cropedHeight = this.config.cropedHeight,
        ratio = cropedWidth / cropedHeight,
        selectWidth = cropedWidth * (naturalWidth / scaledWidth),
        selectHeight = cropedHeight * (naturalHeight / scaledHeight);

    // $picture.css('height', scaledHeight);
    this.img = $.Jcrop($picture, {
      trueSize: [naturalWidth, naturalHeight],
      setSelect: [0, 0, selectWidth, selectHeight],
      aspectRatio: ratio,
      keySupport: false,
      allowSelect: false,
      onSelect: function onSelect(c) {
        self.onSelect(c);
      }
    });
  }

  _createClass(EsImageCrop, [{
    key: 'crop',
    value: function crop() {
      var postData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var self = this;
      var cropImgUrl = app.imgCropUrl;

      var newPostData = $.extend(this.img.tellScaled(), postData, {
        width: this.element.width(),
        height: this.element.height(),
        group: self.config.group
      });

      //由于小数精度问题，jcrop计算出的x、y初始坐标可能小于0，比如-2.842170943040401e-14, 应当修正此类非法数据
      newPostData.x = newPostData.x > 0 ? newPostData.x : 0;
      newPostData.y = newPostData.y > 0 ? newPostData.y : 0;
      $.post(cropImgUrl, newPostData, function (response) {
        self.afterCrop(response);
      });
    }
  }, {
    key: 'onSelect',
    value: function onSelect(c) {
      //override it
    }
  }, {
    key: 'afterCrop',
    value: function afterCrop(response) {
      //override it
    }
  }]);

  return EsImageCrop;
}();

exports.default = EsImageCrop;