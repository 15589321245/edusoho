'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _esSwfobject = require('es-swfobject');

var _esSwfobject2 = _interopRequireDefault(_esSwfobject);

var _messenger = require('../../../../common/messenger');

var _messenger2 = _interopRequireDefault(_messenger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoPlay = function () {
  function VideoPlay(container) {
    _classCallCheck(this, VideoPlay);

    this.player = {};
    this.container = container;
  }

  _createClass(VideoPlay, [{
    key: 'play',
    value: function play() {
      if ($('#swf-player').length) {
        this._playerSwf();
      } else {
        this._playVideo();
      }
    }
  }, {
    key: '_playerSwf',
    value: function _playerSwf() {
      var swf_dom = 'swf-player';
      _esSwfobject2.default.embedSWF($('#' + swf_dom).data('url'), swf_dom, '100%', '100%', "9.0.0", null, null, {
        wmode: 'opaque',
        allowFullScreen: 'true'
      });
    }
  }, {
    key: '_playVideo',
    value: function _playVideo() {
      var messenger = new _messenger2.default({
        name: 'parent',
        project: 'PlayerProject',
        children: [],
        type: 'parent'
      });

      if ($(this.container).data('timelimit')) {
        $(".modal-footer").prepend($('.js-buy-text').html());
        messenger.on("ended", function () {
          $('#task-preview-player').html($('.js-time-limit-dev').html());
        });
      }
    }
  }]);

  return VideoPlay;
}();

var videoplay = new VideoPlay('#lesson-video-content');
videoplay.play();