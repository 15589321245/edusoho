'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _postal = require('postal');

var _postal2 = _interopRequireDefault(_postal);

require('postal.federation');

require('postal.xframe');

require('es6-promise');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TaskEventEmitter = function () {
  function TaskEventEmitter(element) {
    _classCallCheck(this, TaskEventEmitter);

    this.element = $(element);
    this.eventUrl = this.element.data('eventUrl');
    if (this.eventUrl === undefined) {
      throw Error('task event url is undefined');
    }

    this.eventMap = {
      receives: {}
    };

    this._registerIframeEvents();
  }

  _createClass(TaskEventEmitter, [{
    key: '_registerIframeEvents',
    value: function _registerIframeEvents() {
      _postal2.default.instanceId('task');

      _postal2.default.fedx.addFilter([{
        channel: 'activity-events', //接收 activity iframe的事件
        topic: '#',
        direction: 'in'
      }, {
        channel: 'task-events', // 发送事件到activity iframe
        topic: '#',
        direction: 'out'
      }]);

      this._registerReceiveActivityIframeEvents();
      return this;
    }
  }, {
    key: '_registerReceiveActivityIframeEvents',
    value: function _registerReceiveActivityIframeEvents() {
      var _this = this;

      _postal2.default.subscribe({
        channel: 'activity-events',
        topic: '#',
        callback: function callback(_ref) {
          var event = _ref.event,
              data = _ref.data;

          var listeners = _this.eventMap.receives[event];
          $.post(_this.eventUrl, { eventName: event, data: data }).done(function (response) {
            if (typeof listeners !== 'undefined') {
              listeners.forEach(function (callback) {
                return callback(response);
              });
            }
            _postal2.default.publish({
              channel: 'task-events',
              topic: '#',
              data: response
            });
          }).fail(function (error) {
            _postal2.default.publish({
              channel: 'task-events',
              topic: '#',
              data: { event: event, error: error }
            });
          });
        }
      });

      return this;
    }

    //发送事件到activity

  }, {
    key: 'emit',
    value: function emit(event, data) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        $.post(_this2.eventUrl, { eventName: event, data: data }).done(function (response) {
          console.log(' Promise done');
          _postal2.default.publish({
            channel: 'task-events',
            topic: '#',
            data: { event: response.event, data: response.data }
          });
          resolve(response);
        }).fail(function (error) {
          console.log(' Promise done');
          reject(error);
        });
      });
    }

    // 监听activity的事件

  }, {
    key: 'receive',
    value: function receive(event, callback) {
      this.eventMap.receives[event] = this.eventMap.receives[event] || [];
      this.eventMap.receives[event].push(callback);
    }
  }]);

  return TaskEventEmitter;
}();

exports.default = TaskEventEmitter;