'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _formBase = require('./form-base');

var _formBase2 = _interopRequireDefault(_formBase);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _questionOptions = require('app/common/component/question-options');

var _questionOptions2 = _interopRequireDefault(_questionOptions);

var _postal = require('postal');

var _postal2 = _interopRequireDefault(_postal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Choice = function (_QuestionFormBase) {
  _inherits(Choice, _QuestionFormBase);

  function Choice($form) {
    _classCallCheck(this, Choice);

    var _this = _possibleConstructorReturn(this, (Choice.__proto__ || Object.getPrototypeOf(Choice)).call(this, $form));

    _this.isSubmit = false;
    _this.$submit = null;
    _this.$questionOptions = $('#question-options');
    _this.dataSource = _this.$questionOptions.data('choices');
    _this.dataAnswer = _this.$questionOptions.data('answer');
    if (_this.dataSource) {
      _this.dataSource = JSON.parse(_this.dataSource);
      _this.dataAnswer = JSON.parse(_this.dataAnswer);
    } else {
      _this.dataSource = [];
      _this.dataAnswer = [];
    }
    _this.imageUploadUrl = _this.$questionOptions.data('imageUploadUrl');
    _this.imageDownloadUrl = _this.$questionOptions.data('imageDownloadUrl');
    console.log(_this.imageUploadUrl);
    console.log(_this.imageDownloadUrl);
    _this.initTitleEditor();
    _this.initAnalysisEditor();
    _this.initOptions();
    _this.subscriptionMessage();
    return _this;
  }

  _createClass(Choice, [{
    key: '_initEvent',
    value: function _initEvent() {
      var _this2 = this;

      this.$form.on('click', '[data-role=submit]', function (event) {
        return _this2.submitForm(event);
      });
    }
  }, {
    key: 'submitForm',
    value: function submitForm(event) {
      this.$submit = $(event.currentTarget);
      console.log(this.validator.form());
      console.log(this.isSubmit);
      if (this.validator.form() && this.isSubmit) {
        this.submit();
      }
      if (!this.isSubmit) {
        this.publishMessage();
      }
    }
  }, {
    key: 'submit',
    value: function submit() {
      console.log('submit');
      this.$submit.button('loading');
      this.$form.submit();
    }
  }, {
    key: 'initOptions',
    value: function initOptions() {
      _reactDom2.default.render(_react2.default.createElement(_questionOptions2.default, { imageUploadUrl: this.imageUploadUrl, imageDownloadUrl: this.imageDownloadUrl, dataSource: this.dataSource, dataAnswer: this.dataAnswer, minCheckedNum: 2 }), document.getElementById('question-options'));
    }
  }, {
    key: 'publishMessage',
    value: function publishMessage() {
      console.log('publishMessage');
      _postal2.default.publish({
        channel: "manage-question",
        topic: "question-create-form-validator-start",
        data: {
          isValidator: true
        }
      });
    }
  }, {
    key: 'subscriptionMessage',
    value: function subscriptionMessage() {
      var _this3 = this;

      console.log('subscriptionMessage');
      _postal2.default.subscribe({
        channel: "manage-question",
        topic: "question-create-form-validator-end",
        callback: function callback(data, envelope) {
          _this3.isSubmit = data.isValidator;
          console.log({
            'subscriptionMessage': _this3.isSubmit
          });
          if (_this3.isSubmit && _this3.validator.form()) {
            console.log('submit by subscriptionMessage');
            _this3.submit();
          }
        }
      });
    }
  }]);

  return Choice;
}(_formBase2.default);

exports.default = Choice;