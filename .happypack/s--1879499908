'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fileChoose = require('../../file-chooser/file-choose');

var _fileChoose2 = _interopRequireDefault(_fileChoose);

var _chooserUi = require('../widget/chooser-ui.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $mediaId = $('[name="mediaId"]');

var PPT = function () {
  function PPT() {
    _classCallCheck(this, PPT);

    this.$mediaId = $('[name="mediaId"]');
    this.init();
  }

  _createClass(PPT, [{
    key: 'init',
    value: function init() {
      (0, _chooserUi.showChooserType)(this.$mediaId);
    }
  }, {
    key: 'initStep2Form',
    value: function initStep2Form() {
      var $step2_form = $("#step2-form");
      var validator = $step2_form.data('validator');
      validator = $step2_form.validate({
        rules: {
          title: {
            required: true,
            maxlength: 50,
            trim: true
          },
          mediaId: 'required'
        },
        messages: {
          mediaId: {
            required: '请上传或选择%display%'
          }
        }
      });
    }
  }, {
    key: 'initStep3Form',
    value: function initStep3Form() {
      var $step3_form = $("#step3-form");
      var validator = $step3_form.validate({
        rules: {
          finishDetail: {
            required: true,
            digits: true,
            max: 300
          }
        },
        messages: {
          finishDetail: {
            required: '请输入至少观看多少分钟'
          }
        }
      });
      $step3_form.data('validator', validator);
    }
  }, {
    key: 'initFileChooser',
    value: function initFileChooser() {
      var fileChooser = new _fileChoose2.default();

      fileChooser.on('select', function (file) {
        (0, _chooserUi.chooserUiClose)();
        $mediaId.val(file.id);
      });
    }
  }]);

  return PPT;
}();

inItStep2form();

function inItStep2form() {}

var $select = $('#condition-select');
if ($select.children('option:selected').val() === 'time') {
  onConditionTimeType();
}

var onConditionTimeType = function onConditionTimeType() {
  var $step3_form = $("#step3-form");
  var validator = $step3_form.validate({
    rules: {
      finishDetail: {
        required: true,
        digits: true,
        max: 300
      }
    },
    messages: {
      finishDetail: {
        required: '请输入至少观看多少分钟'
      }
    }
  });
  $step3_form.data('validator', validator);
  var $conditionsDetail = $("#condition-group");
  $conditionsDetail.removeClass('hidden');
};

$select.on('change', function (event) {
  var conditionsType = $(event.currentTarget).children('option:selected').val();
  var $conditionsDetail = $("#condition-group");
  if (conditionsType !== 'time') {
    $conditionsDetail.addClass('hidden');
  } else {
    onConditionTimeType();
  }
});