'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _editor = require('../editor');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Live = function () {
  function Live(props) {
    _classCallCheck(this, Live);

    this._init();
    this.validator2 = null;
  }

  _createClass(Live, [{
    key: '_init',
    value: function _init() {
      this._extendValidator();
      this._initStep2Form();
    }
  }, {
    key: '_extendValidator',
    value: function _extendValidator() {
      $.validator.addMethod("after", function (value, element, params) {
        var now = new Date().getTime();
        console.log(value);
        var valuedata = new Date(value);

        console.log(now);
        console.log(valuedata);

        console.log(valuedata > now);

        return value && new Date(value) > now;
      }, Translator.trans('开始时间应晚于当前时间'));
    }
  }, {
    key: '_initStep2Form',
    value: function _initStep2Form() {
      var $step2_form = $("#step2-form");
      this.validator2 = $step2_form.data('validator', validator);
      this.validator2 = $step2_form.validate({
        onkeyup: false,
        rules: {
          title: {
            required: true,
            maxlength: 50,
            trim: true
          },
          startTime: {
            required: true,
            DateAndTime: true,
            after: true
          },
          length: {
            required: true,
            digits: true,
            max: 300,
            min: 1
          },
          remark: {
            maxlength: 1000
          }
        }
      });
      (0, _editor.initEditor)($('[name="remark"]'), this.validator2);
      this._dateTimePicker(this.validator2);
    }
  }, {
    key: '_dateTimePicker',
    value: function _dateTimePicker(validator) {
      var $starttime = $('#startTime');
      $starttime.datetimepicker({
        format: 'yyyy-mm-dd hh:ii',
        language: "zh",
        autoclose: true,
        endDate: new Date(Date.now() + 86400 * 365 * 100 * 1000)
      }).on('hide', function () {
        validator.form();
      });
      $starttime.datetimepicker('setStartDate', new Date());
    }
  }]);

  return Live;
}();

new Live();