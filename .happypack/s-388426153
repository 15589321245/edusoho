'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('common/jquery-form');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var QuestionImport = function () {
  function QuestionImport($form) {
    _classCallCheck(this, QuestionImport);

    this.$form = $form;
    this.validator = null;
    this.showBoard = $('#questions-show-board');
    this.step = 10;
    this.init();
  }

  _createClass(QuestionImport, [{
    key: 'init',
    value: function init() {
      var _this = this;

      this._initValidate();
      this.$form.on('click', '#question-import-btn', function (event) {
        return _this._readBtn(event);
      });
      this.showBoard.on('click', '#show-more-btn', function (event) {
        return _this._getMore(event);
      });
      this.showBoard.on('click', '#import-btn', function (event) {
        return _this._importSubmit(event);
      });
    }
  }, {
    key: '_initValidate',
    value: function _initValidate() {
      this.validator = this.$form.validate({
        rules: {
          importFile: {
            required: true
          },
          target: {
            required: true
          }
        },
        messages: {
          importFile: '请选择文件',
          target: '请选择导入范围'
        }
      });
    }
  }, {
    key: '_readBtn',
    value: function _readBtn(event) {
      var self = this;
      var btn = $(event.currentTarget);

      if (self.validator.form()) {
        btn.button('loading');

        self.$form.ajaxSubmit({
          success: function success(html) {
            if ($(html).data('error') == true) {
              btn.removeClass('disabled').button('reset');
              self.showBoard.replaceWith($(html));
            } else {
              $('#import-file').clearFields();
              self.$form.hide();
              self.showBoard.html(html);
              self.showBoard.find('.question-step:gt(9)').hide();
            }
          },
          error: function error(response) {
            var error = JSON.parse(response);
            btn.button('error');
            self.showBoard.addClass('well').text(error).show();
          }
        });
      }
    }
  }, {
    key: '_getMore',
    value: function _getMore(event) {
      this.step += 10;

      this.showBoard.find('.question-step:lt(' + this.step + ')').show();

      if (this.showBoard.find('.question-step').length <= this.step) {
        $('#show-more-btn').remove();
      }
    }
  }, {
    key: '_importSubmit',
    value: function _importSubmit(event) {
      var _this2 = this;

      var btn = $(event.currentTarget);

      btn.attr('disabled', 'disabled').button('reading');

      var questions = $('#questions').html();
      $.post(btn.data('url'), { questions: questions }, function (response) {
        if (response > 0) {
          _this2.$form.show();
          _this2.showBoard.show();
          var message = '成功导入' + response + '道题';
          _this2.showBoard.addClass('well color-success').html(message);
          $('#question-import-btn').removeClass('disabled').button('reset');
        } else {
          btn.button('error');
        }
      });
    }
  }]);

  return QuestionImport;
}();

new QuestionImport($('#question-import-form'));