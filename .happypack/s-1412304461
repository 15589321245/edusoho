"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sidebar = require("./widget/sidebar");

var _sidebar2 = _interopRequireDefault(_sidebar);

var _taskUi = require("./widget/task-ui");

var _taskUi2 = _interopRequireDefault(_taskUi);

var _taskPipe = require("./widget/task-pipe");

var _taskPipe2 = _interopRequireDefault(_taskPipe);

var _esEventEmitter = require("common/es-event-emitter");

var _esEventEmitter2 = _interopRequireDefault(_esEventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TaskShow = function (_Emitter) {
  _inherits(TaskShow, _Emitter);

  function TaskShow(_ref) {
    var element = _ref.element,
        mode = _ref.mode;

    _classCallCheck(this, TaskShow);

    var _this = _possibleConstructorReturn(this, (TaskShow.__proto__ || Object.getPrototypeOf(TaskShow)).call(this));

    _this.element = $(element);
    _this.mode = mode;

    _this.ui = new _taskUi2.default({
      element: '.js-task-dashboard-page'
    });

    _this.init();
    return _this;
  }

  _createClass(TaskShow, [{
    key: "init",
    value: function init() {
      this.initPlugin();
      this.initSidebar();
      if (this.mode != 'preview') {
        this.initTaskPipe();
        this.initLearnBtn();
      }
    }
  }, {
    key: "initPlugin",
    value: function initPlugin() {
      $('[data-toggle="tooltip"]').tooltip();
      $('[data-toggle="popover"]').popover({
        html: true,
        trigger: 'hover'
      });
    }
  }, {
    key: "initLearnBtn",
    value: function initLearnBtn() {
      var _this2 = this;

      this.element.on('click', '#learn-btn', function (event) {
        $.post($('#learn-btn').data('url'), function (response) {
          $('#modal').modal('show');
          $('#modal').html(response);
          $('input[name="task-result-status"]', $('#js-hidden-data')).val('finish');
          _this2.ui.learned();
        });
      });
    }
  }, {
    key: "initTaskPipe",
    value: function initTaskPipe() {
      var _this3 = this;

      this.eventEmitter = new _taskPipe2.default(this.element.find('#task-content-iframe'));
      this.eventEmitter.addListener('finish', function (response) {
        _this3._receiveFinish(response);
      });
    }
  }, {
    key: "_receiveFinish",
    value: function _receiveFinish(response) {
      var _this4 = this;

      // response.result.status == 'finish'
      //     &&
      if ($('input[name="task-result-status"]', $('#js-hidden-data')).val() != 'finish') {
        // 盘点是任务式学习还是自由式学习
        $.get($(".js-learned-prompt").data('url'), function (html) {
          $(".js-learned-prompt").attr('data-content', html);
          _this4.ui.learnedWeakPrompt();
          _this4.ui.learned();
          _this4.sidebar.reload();
          $('input[name="task-result-status"]', $('#js-hidden-data')).val('finish');
        });
      }
    }
  }, {
    key: "initSidebar",
    value: function initSidebar() {
      var _this5 = this;

      this.sidebar = new _sidebar2.default({
        element: this.element.find('#dashboard-sidebar'),
        url: this.element.find('#js-hidden-data [name="plugins_url"]').val()
      });
      this.sidebar.on('popup', function (px, time) {
        _this5.element.find('#dashboard-content').animate({
          right: px
        }, time);
      }).on('fold', function (px, time) {
        _this5.element.find('#dashboard-content').animate({
          right: px
        }, time);
      });
    }
  }]);

  return TaskShow;
}(_esEventEmitter2.default);

new TaskShow({
  element: $('body'),
  mode: $('body').find('#js-hidden-data [name="mode"]').val()
});