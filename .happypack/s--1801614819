'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _option = require('./option');

var _option2 = _interopRequireDefault(_option);

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

var _postal = require('postal');

var _postal2 = _interopRequireDefault(_postal);

var _unit = require('../../unit');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function InitOptionData(dataSource, inputValue, validatorDatas, seq, checked) {
  var obj = {
    optionId: Math.random().toString().replace('.', ''),
    optionLabel: '选项' + (0, _unit.numberConvertLetter)(seq),
    inputValue: inputValue,
    checked: checked
  };
  validatorDatas.Options[obj.optionId] = inputValue.length > 0 ? 1 : 0;
  if (checked) {
    validatorDatas.checkedNum += 1;
  }
  dataSource.push(obj);
}

function _deleteOption(dataSource, validatorDatas, optionId) {
  for (var i = 0; i < dataSource.length; i++) {
    if (dataSource[i].optionId == optionId) {
      if (dataSource[i].checked) {
        validatorDatas.checkedNum = 0;
      }
      dataSource.splice(i, 1);
      console.log(validatorDatas.Options[optionId]);
      console.log(dataSource);
      delete validatorDatas.Options[optionId];
      i--;
    } else {
      dataSource[i].optionLabel = '选项' + (0, _unit.numberConvertLetter)(i + 1);
    }
  }
}

function _changeOptionChecked(dataSource, validatorDatas, id, checked, isRadio) {
  var checkedNum = 0;
  dataSource.map(function (item, index) {
    if (!isRadio) {
      if (item.optionId == id) {
        dataSource[index].checked = !checked;
      }
    } else {
      //单选
      if (item.optionId == id && !checked) {
        dataSource[index].checked = true;
      } else if (!checked) {
        dataSource[index].checked = false;
      }
    }
    //计算选择的答案
    console.log(dataSource[index].checked);
    if (dataSource[index].checked) {
      checkedNum++;
    }
  });
  console.log(checkedNum);
  validatorDatas.checkedNum = checkedNum;
}

function updateOption(dataSource, validatorDatas, id, value) {
  dataSource.map(function (item, index) {
    if (item.optionId == id) {
      dataSource[index].inputValue = value;
    }
  });
}

var QuestionOptions = function (_Component) {
  _inherits(QuestionOptions, _Component);

  function QuestionOptions(props) {
    _classCallCheck(this, QuestionOptions);

    var _this = _possibleConstructorReturn(this, (QuestionOptions.__proto__ || Object.getPrototypeOf(QuestionOptions)).call(this, props));

    _this.state = {
      dataSource: [],
      isValidator: false
    };
    //验证的数据
    _this.validatorDatas = {
      checkedNum: 0,
      Options: {}
    };
    var dataSource = _this.props.dataSource;
    var dataAnswer = _this.props.dataAnswer;
    if (dataSource.length > 0) {
      dataSource.map(function (item, index) {
        var checked = false;
        for (var i = 0; i < dataAnswer.length; i++) {
          if (index == dataAnswer[i]) {
            checked = true;
          }
        }
        InitOptionData(_this.state.dataSource, item, _this.validatorDatas, index + 1, checked);
      });
    } else {
      for (var i = 1; i <= _this.props.defaultNum; i++) {
        InitOptionData(_this.state.dataSource, '', _this.validatorDatas, i, false);
      }
    }
    _this.subscriptionMessage();
    console.log(_this.validatorOptions);
    return _this;
  }

  _createClass(QuestionOptions, [{
    key: 'subscriptionMessage',
    value: function subscriptionMessage() {
      var _this2 = this;

      _postal2.default.subscribe({
        channel: "manage-question",
        topic: "question-create-form-validator-start",
        callback: function callback(data, envelope) {
          _this2.validatorOptions(data);
        }
      });
    }
  }, {
    key: 'publishMessage',
    value: function publishMessage(isValidator) {
      _postal2.default.publish({
        channel: "manage-question",
        topic: "question-create-form-validator-end",
        data: {
          isValidator: isValidator
        }
      });
    }
  }, {
    key: 'validatorOptions',
    value: function validatorOptions(data) {
      var validNum = 0;

      //触发视觉
      this.setState({
        isValidator: data.isValidator
      });

      for (var option in this.validatorDatas.Options) {
        validNum += this.validatorDatas.Options[option];
      }

      if (validNum < this.state.dataSource.length) {
        console.log(' validNum is error ');
        return;
      }

      if (this.validatorDatas.checkedNum < this.props.minCheckedNum) {
        (0, _notify2.default)('danger', '\u81F3\u5C11\u9009\u62E9' + this.props.minCheckedNum + '\u4E2A\u7B54\u6848!');
      } else {
        console.log('publishMessage');
        this.publishMessage(true);
      }
    }
  }, {
    key: 'addOption',
    value: function addOption() {
      if (this.state.dataSource.length >= this.props.maxNum) {
        (0, _notify2.default)('danger', '\u9009\u9879\u6700\u591A' + this.props.maxNum + '\u4E2A!');
        return;
      }
      InitOptionData(this.state.dataSource, '', this.validatorDatas, this.state.dataSource.length + 1, false);
      this.setState({
        dataSource: this.state.dataSource
      });
      console.log({ 'dataSource': this.state.dataSource });
      console.log({ 'validatorDatas': this.validatorDatas });
    }
  }, {
    key: 'changeOptionChecked',
    value: function changeOptionChecked(id, checked) {
      _changeOptionChecked(this.state.dataSource, this.validatorDatas, id, checked, this.props.isRadio);
      this.setState({
        dataSource: this.state.dataSource
      });
      if (this.validatorDatas.checkedNum <= 0) {
        this.publishMessage(false);
      }
    }
  }, {
    key: 'deleteOption',
    value: function deleteOption(id) {
      if (this.state.dataSource.length <= this.props.minNum) {
        (0, _notify2.default)('danger', '\u9009\u9879\u6700\u5C11' + this.props.minNum + '\u4E2A!');
        return;
      }
      _deleteOption(this.state.dataSource, this.validatorDatas, id);
      this.setState({
        dataSource: this.state.dataSource
      });
      console.log({ 'validatorDatas': this.validatorDatas });
    }
  }, {
    key: 'updateInputValue',
    value: function updateInputValue(id, value) {
      updateOption(this.state.dataSource, this.validatorDatas, id, value);
      this.validatorDatas.Options[id] = value.length > 0 ? 1 : 0;
      if (value.length <= 0) {
        this.publishMessage(false);
      }
      this.setState({
        dataSource: this.state.dataSource
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        { className: 'question-options-group' },
        this.state.dataSource.map(function (item, index) {
          return _react2.default.createElement(_option2.default, { imageUploadUrl: _this3.props.imageUploadUrl, imageDownloadUrl: _this3.props.imageDownloadUrl, isRadio: _this3.props.isRadio, publishMessage: function publishMessage(isValidator) {
              return _this3.publishMessage(isValidator);
            }, validatorDatas: _this3.validatorDatas, isValidator: _this3.state.isValidator, datas: item, key: index, index: index, deleteOption: function deleteOption(id) {
              return _this3.deleteOption(id);
            }, changeOptionChecked: function changeOptionChecked(id, checked) {
              return _this3.changeOptionChecked(id, checked);
            }, updateInputValue: function updateInputValue(id, value) {
              return _this3.updateInputValue(id, value);
            } });
        }),
        _react2.default.createElement(
          'div',
          { className: 'form-group' },
          _react2.default.createElement(
            'div',
            { className: 'col-md-8 col-md-offset-2' },
            _react2.default.createElement(
              'a',
              { className: 'btn btn-success btn-sm pull-right', onClick: function onClick() {
                  return _this3.addOption();
                } },
              '\u65B0\u589E\u9009\u9879'
            )
          )
        )
      );
    }
  }]);

  return QuestionOptions;
}(_react.Component);

exports.default = QuestionOptions;


QuestionOptions.defaultProps = {
  defaultNum: 4, //默认选项个数
  maxNum: 10, //最多选项的个数
  minNum: 2, //最少选项的个数
  isRadio: false, //是否为单选
  minCheckedNum: 1 };