'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SubtitleDialog = function () {
  function SubtitleDialog(element) {
    _classCallCheck(this, SubtitleDialog);

    this.upload_id = 'subtitle-uploader';
    this.inited = false;

    this.element = $(element);

    if (this.element.length > 0) {
      this.init();
      this.inited = true;
    }

    var $container = this.element.closest('#video-subtitle-form-group');
    if ($container.find('#ext_mediaId_for_subtitle').val() > 0) {
      this.render({ id: $container.find('#ext_mediaId_for_subtitle').val() });
    }
  }

  _createClass(SubtitleDialog, [{
    key: 'init',
    value: function init() {

      var self = this;
      //删除字幕
      this.element.on('click', '.js-subtitle-delete', function () {
        var $elem = $(this);
        $.post($elem.data('subtitleDeleteUrl'), function (data) {
          if (data) {
            (0, _notify2.default)('success', '删除字幕成功');
            $elem.parent().remove();
            $('#' + self.upload_id).show();
          }
        });
      });
    }
  }, {
    key: 'render',
    value: function render(media) {
      if (!this.inited) {
        return;
      }

      if (media && 'id' in media && media.id > 0) {
        this.media = media;
        this.element.html('加载字幕...');
        var self = this;
        $.get(this.element.data('dialogUrl'), { mediaId: this.media.id }, function (html) {
          self.element.html(html);
          self.initUploader();
        });
      }
    }
  }, {
    key: 'initUploader',
    value: function initUploader() {
      var self = this;
      var $elem = $('#' + this.upload_id);
      var mediaId = $('.js-subtitle-dialog').data('mediaId');
      var globalId = $elem.data('mediaGlobalId');

      if (this.uploader) {
        this._destroyUploader();
      }
      var uploader = new UploaderSDK({
        initUrl: $elem.data('initUrl'),
        finishUrl: $elem.data('finishUrl'),
        id: this.upload_id,
        ui: 'simple',
        multi: true,
        accept: {
          extensions: ['srt'],
          mimeTypes: ['text/srt']
        },
        type: 'sub',
        process: {
          videoNo: globalId
        }
      });

      uploader.on('error', function (err) {
        if (err.error === 'Q_TYPE_DENIED') {
          (0, _notify2.default)('danger', '请上传srt格式的文件！');
        }
      });

      uploader.on('file.finish', function (file) {
        $.post($elem.data('subtitleCreateUrl'), {
          "name": file.name,
          "subtitleId": file.id,
          "mediaId": mediaId
        }).success(function (data) {
          var convertStatus = {
            waiting: '等待转码',
            doing: '正在转码',
            success: '转码成功',
            error: '转码失败',
            none: '等待转码'
          };
          $('.js-media-subtitle-list').append('<li class="pvs">' + '<span class="subtitle-name prl">' + data.name + '</span>' + '<span class="subtitle-transcode-status ' + data.convertStatus + '">' + convertStatus[data.convertStatus] + '</span>' + '<a href="javascript:;" class="btn-link pll color-primary js-subtitle-delete" data-subtitle-delete-url="/media/' + mediaId + '/subtitle/' + data.id + '/delete">删除</a>' + '</li>');
          if ($('.js-media-subtitle-list li').length > 3) {
            $('#' + self.upload_id).hide();
          }
          (0, _notify2.default)('success', '字幕上传成功！');
        }).error(function (data) {
          (0, _notify2.default)('danger', data.responseJSON.error.message);
        });
      });

      this.uploader = uploader;
    }
  }, {
    key: 'show',
    value: function show() {
      var parent = this.element.parent('.form-group');
      if (parent.length > 0) {
        parent.removeClass('hide');
      }
    }
  }, {
    key: 'hide',
    value: function hide() {
      var parent = this.element.parent('.form-group');
      if (parent.length > 0) {
        parent.addClass('hide');
      }
    }
  }, {
    key: '_destroyUploader',
    value: function _destroyUploader() {
      if (!this.uploader) {
        return;
      }
      this.uploader.__events = null;
      try {
        this.uploader.destroy();
      } catch (e) {
        //忽略destroy异常
      }
      this.uploader = null;
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (!this.inited) {
        return;
      }
      this._destroyUploader();
    }
  }]);

  return SubtitleDialog;
}();

exports.default = SubtitleDialog;