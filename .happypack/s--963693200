'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _messenger = require('../../../common/messenger');

var _messenger2 = _interopRequireDefault(_messenger);

var _activityEmitter = require('../activity-emitter');

var _activityEmitter2 = _interopRequireDefault(_activityEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VideoPlay = function () {
  function VideoPlay(elment) {
    _classCallCheck(this, VideoPlay);

    this.dom = $(elment);
    this.data = this.dom.data();
    this.player = {};
    this.emitter = new _activityEmitter2.default();
  }

  _createClass(VideoPlay, [{
    key: 'play',
    value: function play() {
      var _this = this;

      var messenger = new _messenger2.default({
        name: 'partner',
        project: 'PlayerProject',
        children: [],
        type: 'parent'
      });

      messenger.on("ended", function (msg) {
        _this.player.playing = false;
        _this._onFinishLearnTask(msg);
      });

      messenger.on("playing", function (msg) {
        _this.player.playing = true;
      });

      messenger.on("paused", function (msg) {
        _this.player.playing = false;
      });

      messenger.on("timechange", function (msg) {});
    }
  }, {
    key: '_onFinishLearnTask',
    value: function _onFinishLearnTask(msg) {
      this.emitter.emit('finish', { data: msg }).then(function () {
        console.log('audio.finish');
      }).catch(function (error) {
        console.error(error);
      });
    }
  }]);

  return VideoPlay;
}();

var videoPlay = new VideoPlay("#audio-content");
videoPlay.play();