{"version":3,"sources":["app/Resources/static-src/app/js/task/widget/task-event-emitter.js"],"names":["TaskEventEmitter","element","$","eventUrl","data","undefined","Error","eventMap","receives","_registerIframeEvents","instanceId","fedx","addFilter","channel","topic","direction","_registerReceiveActivityIframeEvents","subscribe","callback","event","listeners","post","eventName","done","forEach","response","publish","fail","error","Promise","resolve","reject","push"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;IAEqBA,gB;AACnB,4BAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeC,EAAED,OAAF,CAAf;AACA,SAAKE,QAAL,GAAgB,KAAKF,OAAL,CAAaG,IAAb,CAAkB,UAAlB,CAAhB;AACA,QAAI,KAAKD,QAAL,KAAkBE,SAAtB,EAAiC;AAC/B,YAAMC,MAAM,6BAAN,CAAN;AACD;;AAED,SAAKC,QAAL,GAAgB;AACdC,gBAAU;AADI,KAAhB;;AAIA,SAAKC,qBAAL;AACD;;;;4CAEsB;AACrB,uBAAOC,UAAP,CAAkB,MAAlB;;AAEA,uBAAOC,IAAP,CAAYC,SAAZ,CAAsB,CACpB;AACEC,iBAAS,iBADX,EAC8B;AAC5BC,eAAO,GAFT;AAGEC,mBAAW;AAHb,OADoB,EAMpB;AACEF,iBAAS,aADX,EAC2B;AACzBC,eAAO,GAFT;AAGEC,mBAAW;AAHb,OANoB,CAAtB;;AAaA,WAAKC,oCAAL;AACA,aAAO,IAAP;AACD;;;2DAEqC;AAAA;;AACpC,uBAAOC,SAAP,CAAiB;AACfJ,iBAAS,iBADM;AAEfC,eAAO,GAFQ;AAGfI,kBAAU,wBAAmB;AAAA,cAAjBC,KAAiB,QAAjBA,KAAiB;AAAA,cAAVf,IAAU,QAAVA,IAAU;;AAC3B,cAAIgB,YAAY,MAAKb,QAAL,CAAcC,QAAd,CAAuBW,KAAvB,CAAhB;AACAjB,YAAEmB,IAAF,CAAO,MAAKlB,QAAZ,EAAsB,EAACmB,WAAWH,KAAZ,EAAmBf,MAAMA,IAAzB,EAAtB,EACKmB,IADL,CACU,oBAAY;AAChB,gBAAI,OAAOH,SAAP,KAAqB,WAAzB,EAAsC;AACpCA,wBAAUI,OAAV,CAAkB;AAAA,uBAAYN,SAASO,QAAT,CAAZ;AAAA,eAAlB;AACD;AACD,6BAAOC,OAAP,CAAe;AACbb,uBAAS,aADI;AAEbC,qBAAO,GAFM;AAGbV,oBAAMqB;AAHO,aAAf;AAKD,WAVL,EAWKE,IAXL,CAWU,UAACC,KAAD,EAAW;AACf,6BAAOF,OAAP,CAAe;AACbb,uBAAS,aADI;AAEbC,qBAAO,GAFM;AAGbV,oBAAM,EAAEe,OAAOA,KAAT,EAAgBS,OAAOA,KAAvB;AAHO,aAAf;AAKD,WAjBL;AAkBD;AAvBc,OAAjB;;AA0BA,aAAO,IAAP;AACD;;AAED;;;;yBACKT,K,EAAOf,I,EAAM;AAAA;;AAChB,aAAO,IAAIyB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC7B,UAAEmB,IAAF,CAAO,OAAKlB,QAAZ,EAAsB,EAACmB,WAAWH,KAAZ,EAAmBf,MAAMA,IAAzB,EAAtB,EACCmB,IADD,CACM,UAACE,QAAD,EAAc;AAClB,2BAAOC,OAAP,CAAe;AACbb,qBAAS,aADI;AAEbC,mBAAO,GAFM;AAGbV,kBAAM,EAAEe,OAAOM,SAASN,KAAlB,EAAyBf,MAAMqB,SAASrB,IAAxC;AAHO,WAAf;AAKA0B,kBAAQL,QAAR;AACD,SARD,EASCE,IATD,CASM,UAACC,KAAD,EAAW;AACfG,iBAAOH,KAAP;AACD,SAXD;AAYD,OAbM,CAAP;AAcD;;AAED;;;;4BACQT,K,EAAOD,Q,EAAU;AACvB,WAAKX,QAAL,CAAcC,QAAd,CAAuBW,KAAvB,IAAgC,KAAKZ,QAAL,CAAcC,QAAd,CAAuBW,KAAvB,KAAiC,EAAjE;AACA,WAAKZ,QAAL,CAAcC,QAAd,CAAuBW,KAAvB,EAA8Ba,IAA9B,CAAmCd,QAAnC;AACD;;;;;;kBAvFkBlB,gB","file":"task-event-emitter.js","sourceRoot":"/Users/kz/projects/edusoho","sourcesContent":["import postal from 'postal';\nimport 'postal.federation/lib/postal.federation.min.js';\nimport 'postal.xframe/lib/postal.xframe.min.js';\n\nexport default class TaskEventEmitter {\n  constructor(element) {\n    this.element = $(element);\n    this.eventUrl = this.element.data('eventUrl');\n    if (this.eventUrl === undefined) {\n      throw Error('task event url is undefined');\n    }\n\n    this.eventMap = {\n      receives: {}\n    };\n\n    this._registerIframeEvents();\n  }\n\n  _registerIframeEvents(){\n    postal.instanceId('task');\n\n    postal.fedx.addFilter([\n      {\n        channel: 'activity-events', //接收 activity iframe的事件\n        topic: '#',\n        direction: 'in'\n      },\n      {\n        channel: 'task-events',  // 发送事件到activity iframe\n        topic: '#',\n        direction: 'out'\n      }\n    ]);\n\n    this._registerReceiveActivityIframeEvents();\n    return this;\n  }\n\n  _registerReceiveActivityIframeEvents(){\n    postal.subscribe({\n      channel: 'activity-events',\n      topic: '#',\n      callback: ({event, data}) => {\n        let listeners = this.eventMap.receives[event];\n        $.post(this.eventUrl, {eventName: event, data: data})\n            .done(response => {\n              if (typeof listeners !== 'undefined') {\n                listeners.forEach(callback => callback(response));\n              }\n              postal.publish({\n                channel: 'task-events',\n                topic: '#',\n                data: response\n              });\n            })\n            .fail((error) => {\n              postal.publish({\n                channel: 'task-events',\n                topic: '#',\n                data: { event: event, error: error }\n              });\n            });\n      }\n    });\n\n    return this;\n  }\n\n  //发送事件到activity\n  emit(event, data) {\n    return new Promise((resolve, reject) => {\n      $.post(this.eventUrl, {eventName: event, data: data})\n      .done((response) => {\n        postal.publish({\n          channel: 'task-events',\n          topic: '#',\n          data: { event: response.event, data: response.data }\n        });\n        resolve(response);\n      })\n      .fail((error) => {\n        reject(error);\n      });\n    });\n  }\n\n  // 监听activity的事件\n  receive(event, callback) {\n    this.eventMap.receives[event] = this.eventMap.receives[event] || [];\n    this.eventMap.receives[event].push(callback);\n  }\n}\n"]}