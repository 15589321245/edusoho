'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _localVideoPlayer = require('./local-video-player');

var _localVideoPlayer2 = _interopRequireDefault(_localVideoPlayer);

var _balloonCloudVideoPlayerNew = require('./balloon-cloud-video-player-new');

var _balloonCloudVideoPlayerNew2 = _interopRequireDefault(_balloonCloudVideoPlayerNew);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlayerFactory = function () {
  function PlayerFactory() {
    _classCallCheck(this, PlayerFactory);
  }

  _createClass(PlayerFactory, null, [{
    key: 'create',
    value: function create(type, options) {
      switch (type) {
        case "local-video-player":
        case "audio-player":
          return new _localVideoPlayer2.default(options);
          break;
        case "balloon-cloud-video-player":
          return new _balloonCloudVideoPlayerNew2.default(options);
          break;
      }
    }
  }]);

  return PlayerFactory;
}();

exports.default = PlayerFactory;