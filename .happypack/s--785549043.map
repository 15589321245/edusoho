{"version":3,"sources":["app/Resources/static-src/common/es-image-crop.js"],"names":["EsImageCrop","config","self","$","extend","element","group","$picture","scaledWidth","attr","scaledHeight","naturalWidth","data","naturalHeight","cropedWidth","cropedHeight","ratio","selectWidth","selectHeight","img","Jcrop","trueSize","setSelect","aspectRatio","keySupport","allowSelect","onSelect","c","postData","cropImgUrl","app","imgCropUrl","newPostData","tellScaled","width","height","post","response","afterCrop"],"mappings":";;;;;;;;AAAA;;;;IAEMA,W;AACJ,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAIC,OAAO,IAAX;AACA,SAAKD,MAAL,GAAcE,EAAEC,MAAF,CAAS;AACrBC,eAAS,IADY;AAErBC,aAAO;AAFc,KAAT,EAGXL,MAHW,CAAd;;AAKA,SAAKI,OAAL,GAAeF,EAAE,KAAKF,MAAL,CAAYI,OAAd,CAAf;AACA,QAAIE,WAAW,KAAKF,OAApB;AACA,QAAIG,cAAcD,SAASE,IAAT,CAAc,OAAd,CAAlB;AAAA,QACEC,eAAeH,SAASE,IAAT,CAAc,QAAd,CADjB;AAAA,QAEEE,eAAeJ,SAASK,IAAT,CAAc,cAAd,CAFjB;AAAA,QAGEC,gBAAgBN,SAASK,IAAT,CAAc,eAAd,CAHlB;AAAA,QAIEE,cAAc,KAAKb,MAAL,CAAYa,WAJ5B;AAAA,QAKEC,eAAe,KAAKd,MAAL,CAAYc,YAL7B;AAAA,QAMEC,QAAQF,cAAcC,YANxB;AAAA,QAOEE,cAAeH,WAAD,IAAiBH,eAAeH,WAAhC,CAPhB;AAAA,QAQEU,eAAgBH,YAAD,IAAkBF,gBAAgBH,YAAlC,CARjB;;AAUA;AACA,SAAKS,GAAL,GAAWhB,EAAEiB,KAAF,CAAQb,QAAR,EAAkB;AAC3Bc,gBAAU,CAACV,YAAD,EAAeE,aAAf,CADiB;AAE3BS,iBAAW,CAAC,CAAD,EAAI,CAAJ,EAAOL,WAAP,EAAoBC,YAApB,CAFgB;AAG3BK,mBAAaP,KAHc;AAI3BQ,kBAAY,KAJe;AAK3BC,mBAAa,KALc;AAM3BC,cAN2B,oBAMlBC,CANkB,EAMf;AACVzB,aAAKwB,QAAL,CAAcC,CAAd;AACD;AAR0B,KAAlB,CAAX;AAUD;;;;2BAEmB;AAAA,UAAfC,QAAe,uEAAJ,EAAI;;AAClB,UAAI1B,OAAO,IAAX;AACA,UAAI2B,aAAaC,IAAIC,UAArB;;AAEA,UAAIC,cAAc7B,EAAEC,MAAF,CAAS,KAAKe,GAAL,CAASc,UAAT,EAAT,EAAgCL,QAAhC,EAA0C;AAC1DM,eAAO,KAAK7B,OAAL,CAAa6B,KAAb,EADmD;AAE1DC,gBAAQ,KAAK9B,OAAL,CAAa8B,MAAb,EAFkD;AAG1D7B,eAAOJ,KAAKD,MAAL,CAAYK;AAHuC,OAA1C,CAAlB;;AAMAH,QAAEiC,IAAF,CAAOP,UAAP,EAAmBG,WAAnB,EAAgC,UAASK,QAAT,EAAmB;AACjDnC,aAAKoC,SAAL,CAAeD,QAAf;AACD,OAFD;AAGD;;;6BAEQV,C,EAAG;AACV;AACD;;;8BAESU,Q,EAAU;AAClB;AACD;;;;;;kBAGYrC,W","file":"es-image-crop.js","sourceRoot":"/Users/kz/projects/edusoho","sourcesContent":["import 'jquery-jcrop/js/jquery.Jcrop.js';\n\nclass EsImageCrop {\n  constructor(config) {\n    let self = this;\n    this.config = $.extend({\n      element: null,\n      group: 'default'\n    }, config);\n\n    this.element = $(this.config.element);\n    let $picture = this.element;\n    let scaledWidth = $picture.attr('width'),\n      scaledHeight = $picture.attr('height'),\n      naturalWidth = $picture.data('naturalWidth'),\n      naturalHeight = $picture.data('naturalHeight'),\n      cropedWidth = this.config.cropedWidth,\n      cropedHeight = this.config.cropedHeight,\n      ratio = cropedWidth / cropedHeight,\n      selectWidth = (cropedWidth) * (naturalWidth / scaledWidth),\n      selectHeight = (cropedHeight) * (naturalHeight / scaledHeight);\n\n    // $picture.css('height', scaledHeight);\n    this.img = $.Jcrop($picture, {\n      trueSize: [naturalWidth, naturalHeight],\n      setSelect: [0, 0, selectWidth, selectHeight],\n      aspectRatio: ratio,\n      keySupport: false,\n      allowSelect: false,\n      onSelect(c) {\n        self.onSelect(c);\n      }\n    });\n  }\n\n  crop(postData = {}) {\n    let self = this;\n    let cropImgUrl = app.imgCropUrl;\n\n    let newPostData = $.extend(this.img.tellScaled(), postData, {\n      width: this.element.width(),\n      height: this.element.height(),\n      group: self.config.group\n    });\n\n    $.post(cropImgUrl, newPostData, function(response) {\n      self.afterCrop(response);\n    });\n  }\n\n  onSelect(c) {\n    //override it\n  }\n\n  afterCrop(response) {\n    //override it\n  }\n}\n\nexport default EsImageCrop;\n"]}