'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _loadAnimation = require('common/load-animation');

var _loadAnimation2 = _interopRequireDefault(_loadAnimation);

require('jquery-sortable');

var _notify = require('common/notify');

var _notify2 = _interopRequireDefault(_notify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Editor = function () {
  function Editor($modal) {
    _classCallCheck(this, Editor);

    this.$element = $modal;
    this.$task_manage_content = $('#task-create-content');
    this.$task_manage_type = $('#task-create-type');
    this.$frame = null;
    this.$iframe_body = null;
    this.iframe_jQuery = null;
    this.iframe_name = 'task-create-content-iframe';
    this.mode = this.$task_manage_type.data('editorMode');
    this.type = this.$task_manage_type.data('editorType');
    this.step = 1;
    this.loaded = false;
    this.contentUrl = '';
    this._init();
    this._initEvent();
  }

  _createClass(Editor, [{
    key: '_initEvent',
    value: function _initEvent() {
      var _this = this;

      $('#course-tasks-submit').click(function (event) {
        return _this._onSave(event);
      });
      $('#course-tasks-next').click(function (event) {
        return _this._onNext(event);
      });
      $('#course-tasks-prev').click(function (event) {
        return _this._onPrev(event);
      });
      if (this.mode != 'edit') {
        $('.js-course-tasks-item').click(function (event) {
          return _this._onSetType(event);
        });
      } else {
        $('.delete-task').click(function (event) {
          return _this._onDelete(event);
        });
      }
    }
  }, {
    key: '_init',
    value: function _init() {
      this._inItStep1form();
      this._renderContent(this.step);
      if (this.mode == 'edit') {
        this.contentUrl = this.$task_manage_type.data('editorStep2Url');
        this.step = 2;
        this._switchPage();
      }
    }
  }, {
    key: '_onNext',
    value: function _onNext(e) {
      if (this.step === 3 || !this._validator(this.step)) {
        return;
      }
      this.step += 1;
      this._switchPage();
    }
  }, {
    key: '_onPrev',
    value: function _onPrev() {
      // 第二页可以上一步
      if (this.step === 1 || this.step == 3 && !this._validator(this.step)) {
        return;
      }

      this.step -= 1;
      this._switchPage();
    }
  }, {
    key: '_onSetType',
    value: function _onSetType(event) {
      var $this = $(event.currentTarget).addClass('active');
      $this.siblings().removeClass('active');
      var type = $this.data('type');
      $('[name="mediaType"]').val(type);
      this.contentUrl = $this.data('contentUrl');
      this.loaded = this.type === type;
      this.type = type;
      this._onNext(event);
    }
  }, {
    key: '_askSave',
    value: function _askSave() {
      var isCreateOperation = $('#task-create-type').data('editor-mode') == 'create';
      var isDaysMode = $('#courseExpiryMode').val() == 'days';
      var isNormalCourseSet = $('#courseSetType').val() == 'normal';
      var isLiveType = this.type == 'live';
      var confirmResult = true;
      console.log($('#courseExpiryMode').val());
      if (isCreateOperation && isDaysMode && isNormalCourseSet && isLiveType) {
        confirmResult = confirm('本计划的学习加入方式为“随到随学”，加入直播活动可能会导致后来的学员无法参加，只能观看回放。确定要添加吗？');
      }

      return confirmResult;
    }
  }, {
    key: '_onSave',
    value: function _onSave(event) {
      var _this2 = this;

      if (!this._validator(this.step)) {
        return;
      }

      if (!this._askSave()) {
        return;
      }

      $(event.currentTarget).attr('disabled', 'disabled');
      var postData = $('#step1-form').serializeArray().concat(this.$iframe_body.find('#step2-form').serializeArray()).concat(this.$iframe_body.find("#step3-form").serializeArray());
      $.post(this.$task_manage_type.data('saveUrl'), postData).done(function (response) {
        console.log(response);
        _this2.$element.modal('hide');
        if (response && response.append !== undefined && response.append === false) {
          var _data = $('#sortable-list').sortable("serialize").get();
          $.post($('#sortable-list').data('sortUrl'), { ids: _data }, function (response) {
            if (response) {
              // this.showDefaultSetting();
              // @TODO去除reload;
              document.location.reload();
            }
          });
        }
        var html = response;
        var chapterId = postData.find(function (input) {
          return input.name == 'chapterId';
        });

        var add = 0;
        var $parent = $('#' + chapterId.value);
        var $item = null;

        if ($parent.length) {
          $parent.nextAll().each(function () {
            if ($(this).hasClass('task-manage-chapter')) {
              $(this).before(html);
              add = 1;
              return false;
            }
            if ($parent.hasClass('task-manage-unit') && $(this).hasClass('task-manage-unit')) {
              $(this).before(html);
              add = 1;
              return false;
            }
          });
          if (add != 1) {
            console.log(html);
            // $item = $(html);
            $("#sortable-list").append($item);
            add = 1;
            console.log($item);
          }
        } else {
          // $item = $(html);
          $("#sortable-list").append($item);
        }
        // 最后一个
        // this.showDefaultSetting($item);
        var data = $('#sortable-list').sortable("serialize").get();
        $.post($('#sortable-list').data('sortUrl'), { ids: data });
      }).fail(function (response) {
        var msg = '';
        var errorResponse = JSON.parse(response.responseText);
        if (errorResponse.error && errorResponse.error.message) {
          msg = errorResponse.error.message;
        }
        (0, _notify2.default)('warning', '保存出错: ' + msg);
        $("#course-tasks-submit").attr('disabled', null);
      });
    }
  }, {
    key: 'showDefaultSetting',
    value: function showDefaultSetting() {
      var $item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if ($item && $item.hasClass('js-task-manage-item')) {
        $('.js-task-manage-item').removeClass('active').find('.js-settings-list').slideUp();;
        $item.addClass('active').find('.js-settings-list').slideDown();
      }
    }
  }, {
    key: '_onDelete',
    value: function _onDelete(event) {
      var _this3 = this;

      var $btn = $(event.currentTarget);
      var url = $btn.data('url');
      if (url === undefined) {
        return;
      }

      $.post(url).then(function (response) {
        (0, _notify2.default)('success', '删除成功');
        _this3.$element.modal('hide');
        document.location.reload();
      }).fail(function (error) {
        (0, _notify2.default)('warning', '删除失败~~');
      });
    }
  }, {
    key: '_switchPage',
    value: function _switchPage() {
      this._renderStep(this.step);
      this._renderContent(this.step);
      this._rendStepIframe(this.step);
      this._rendButton(this.step);
      if (this.step == 2 && !this.loaded) {
        this._initIframe();
      }
    }
  }, {
    key: '_initIframe',
    value: function _initIframe() {
      var _this4 = this;

      var html = '<iframe class="' + this.iframe_name + '" id="' + this.iframe_name + '" name="' + this.iframe_name + '" scrolling="no" src="' + this.contentUrl + '"></iframe>';
      this.$task_manage_content.html(html).show();
      this.$frame = $('#' + this.iframe_name).iFrameResize();
      var loadiframe = function loadiframe() {
        _this4.loaded = true;
        var validator = {};
        _this4.iframe_jQuery = _this4.$frame[0].contentWindow.$;
        _this4.$iframe_body = _this4.$frame.contents().find('body').addClass('task-iframe-body');
        _this4._rendButton(2);
        _this4.$iframe_body.find("#step2-form").data('validator', validator);
        _this4.$iframe_body.find("#step3-form").data('validator', validator);
      };
      this.$frame.load((0, _loadAnimation2.default)(loadiframe, this.$task_manage_content));
    }
  }, {
    key: '_inItStep1form',
    value: function _inItStep1form() {
      var $step1_form = $("#step1-form");
      var validator = $step1_form.validate({
        rules: {
          mediaType: {
            required: true
          }
        },
        messages: {
          mediaType: "请选择%display%"
        }
      });
      $step1_form.data('validator', validator);
    }
  }, {
    key: '_validator',
    value: function _validator(step) {
      var validator = null;
      if (step === 1) {
        validator = $("#step1-form").data('validator');
      } else if (this.loaded) {
        var $from = this.$iframe_body.find("#step" + step + "-form");
        validator = this.iframe_jQuery.data($from[0], 'validator');
      }

      if (validator && !validator.form()) {
        return false;
      }
      return true;
    }
  }, {
    key: '_rendButton',
    value: function _rendButton(step) {
      if (step === 1) {
        this._renderPrev(false);
        this._rendSubmit(false);
        this._renderNext(true);
      } else if (step === 2) {
        this._renderPrev(true);
        if (this.mode === 'edit') {
          this._renderPrev(false);
        }
        if (!this.loaded) {
          this._rendSubmit(false);
          this._renderNext(false);
          return;
        }
        this._rendSubmit(true);
        this._renderNext(true);
      } else if (step === 3) {
        this._renderNext(false);
        this._renderPrev(true);
      }
    }
  }, {
    key: '_rendStepIframe',
    value: function _rendStepIframe(step) {
      if (!this.loaded || !this.$iframe_body) {
        return;
      }
      step === 2 ? this.$iframe_body.find(".js-step2-view").addClass('active') : this.$iframe_body.find(".js-step2-view").removeClass('active');
      step === 3 ? this.$iframe_body.find(".js-step3-view").addClass('active') : this.$iframe_body.find(".js-step3-view").removeClass('active');
    }
  }, {
    key: '_renderStep',
    value: function _renderStep(step) {
      $('#task-create-step').find('li:eq(' + (step - 1) + ')').addClass('doing').prev().addClass('done').removeClass('doing');
      $('#task-create-step').find('li:eq(' + (step - 1) + ')').next().removeClass('doing').removeClass('done');
    }
  }, {
    key: '_renderContent',
    value: function _renderContent(step) {
      step === 1 ? this.$task_manage_type.removeClass('hidden') : this.$task_manage_type.addClass('hidden');
      step !== 1 ? this.$task_manage_content.removeClass('hidden') : this.$task_manage_content.addClass('hidden');
    }
  }, {
    key: '_renderNext',
    value: function _renderNext(show) {
      show ? $("#course-tasks-next").removeClass('hidden').removeAttr("disabled") : $("#course-tasks-next").addClass('hidden');
    }
  }, {
    key: '_renderPrev',
    value: function _renderPrev(show) {
      show ? $("#course-tasks-prev").removeClass('hidden') : $("#course-tasks-prev").addClass('hidden');
    }
  }, {
    key: '_rendSubmit',
    value: function _rendSubmit(show) {
      show ? $("#course-tasks-submit").removeClass('hidden') : $("#course-tasks-submit").addClass('hidden');
    }
  }]);

  return Editor;
}();

new Editor($('#modal'));