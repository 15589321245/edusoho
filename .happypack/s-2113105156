'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _postal = require('postal');

var _postal2 = _interopRequireDefault(_postal);

require('postal.federation');

require('postal.xframe');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TaskPipe = function () {
  function TaskPipe(element) {
    _classCallCheck(this, TaskPipe);

    this.element = $(element);
    this.eventUrl = this.element.data('eventUrl');
    if (this.eventUrl === undefined) {
      throw Error('task event url is undefined');
    }

    this.eventDatas = {};
    this.intervalId = null;
    this.lastTime = this.element.data('lastTime');
    this.eventMap = {
      receives: {}
    };

    this._registerChannel();
    this._initInterval();
  }

  _createClass(TaskPipe, [{
    key: '_registerChannel',
    value: function _registerChannel() {
      var _this = this;

      _postal2.default.instanceId('task');

      _postal2.default.fedx.addFilter([{
        channel: 'activity-events', //接收 activity iframe的事件
        topic: '#',
        direction: 'in'
      }, {
        channel: 'task-events', // 发送事件到activity iframe
        topic: '#',
        direction: 'out'
      }]);

      _postal2.default.subscribe({
        channel: 'activity-events',
        topic: '#',
        callback: function callback(_ref) {
          var event = _ref.event,
              data = _ref.data;

          _this.eventDatas[event] = data;
          _this._flush();
        }
      });

      return this;
    }
  }, {
    key: '_initInterval',
    value: function _initInterval() {
      var _this2 = this;

      window.onbeforeunload = function () {
        _this2._clearInterval();
        _this2._flush();
      };
      this._clearInterval();
      var minute = 60 * 1000 * 4;
      this.intervalId = setInterval(function () {
        return _this2._flush();
      }, minute);
    }
  }, {
    key: '_clearInterval',
    value: function _clearInterval() {
      clearInterval(this.intervalId);
    }
  }, {
    key: '_flush',
    value: function _flush() {
      var _this3 = this;

      Object.assign(this.eventDatas, {
        'stay': {
          'lastTime': this.lastTime
        }
      });

      var ajax = $.post(this.eventUrl, { data: { lastTime: this.lastTime, events: this.eventDatas } }).done(function (response) {
        _this3._publishResponse(response);
        _this3.eventDatas = {};
        _this3.lastTime = response.lastTime;
        if (response.result.status) {
          var listners = _this3.eventMap.receives[response.result.status];
          if (listners) {
            for (var i = listners.length - 1; i >= 0; i--) {
              var listner = listners[i];
              listner(response);
            }
          }
        }
      }).fail(function (error) {});

      return ajax;
    }
  }, {
    key: '_publishResponse',
    value: function _publishResponse(response) {
      _postal2.default.publish({
        channel: 'task-events',
        topic: '#',
        data: { event: response.event, data: response.data }
      });
    }
  }, {
    key: 'addListener',
    value: function addListener(event, callback) {
      this.eventMap.receives[event] = this.eventMap.receives[event] || [];
      this.eventMap.receives[event].push(callback);
    }
  }]);

  return TaskPipe;
}();

exports.default = TaskPipe;