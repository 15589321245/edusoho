{"version":3,"sources":["app/Resources/static-src/app/js/task/widget/task-event-emitter.js"],"names":["TaskEventEmitter","element","startTime","timeStep","dataName","$","eventUrl","data","eventDatas","serverInterval","undefined","Error","eventMap","receives","_registerIframeEvents","init","instanceId","fedx","addFilter","channel","topic","direction","_registerReceiveActivityIframeEvents","subscribe","callback","event","listeners","Object","assign","post","eventName","done","forEach","response","publish","fail","error","Promise","resolve","reject","window","onbeforeunload","clear","flush","minute","setInterval","clearInterval","emit","then","receiveFinish","catch","push"],"mappings":"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","file":"task-event-emitter.js","sourceRoot":"/Users/kz/projects/edusoho","sourcesContent":["import postal from 'postal';\nimport 'postal.federation';\nimport 'postal.xframe';\n\nexport default class TaskEventEmitter {\n  constructor({element, startTime, timeStep, dataName}) {\n    this.element = $(element);\n    this.startTime = startTime;\n    this.timeStep = timeStep;\n    this.dataName = dataName;\n    this.eventUrl = this.element.data('eventUrl');\n\n    this.eventDatas = {};\n\n    this.serverInterval = null;\n\n    if (this.eventUrl === undefined) {\n      throw Error('task event url is undefined');\n    }\n\n    this.eventMap = {\n      receives: {}\n    };\n\n    this._registerIframeEvents();\n    this.init();\n  }\n\n  _registerIframeEvents(){\n    postal.instanceId('task');\n\n    postal.fedx.addFilter([\n      {\n        channel: 'activity-events', //接收 activity iframe的事件\n        topic: '#',\n        direction: 'in'\n      },\n      {\n        channel: 'task-events',  // 发送事件到activity iframe\n        topic: '#',\n        direction: 'out'\n      }\n    ]);\n\n    this._registerReceiveActivityIframeEvents();\n    return this;\n  }\n\n  _registerReceiveActivityIframeEvents(){\n    postal.subscribe({\n      channel: 'activity-events',\n      topic: '#',\n      callback: ({event, data}) => {\n        let listeners = this.eventMap.receives[event];\n        Object.assign(this.eventDatas, data);\n        \n        $.post(this.eventUrl, {eventName: event, data: this.eventDatas})\n            .done(response => {\n              if (typeof listeners !== 'undefined') {\n                listeners.forEach(callback => callback(response));\n              }\n              postal.publish({\n                channel: 'task-events',\n                topic: '#',\n                data: response\n              });\n            })\n            .fail((error) => {\n              postal.publish({\n                channel: 'task-events',\n                topic: '#',\n                data: { event: event, error: error }\n              });\n            });\n      }\n    });\n\n    return this;\n  }\n\n  //发送事件到activity\n  emit(event, data) {\n    return new Promise((resolve, reject) => {\n      $.post(this.eventUrl, {eventName: event, data: data})\n      .done((response) => {\n        postal.publish({\n          channel: 'task-events',\n          topic: '#',\n          data: { event: response.event, data: response.data }\n        });\n        resolve(response);\n      })\n      .fail((error) => {\n        reject(error);\n      });\n    });\n  }\n\n  init() {\n    window.onbeforeunload = () => {  \n      this.clear(); \n      this.flush(this.dataName);\n    } \n    this.clear();\n    let minute = 60 * 1000;\n    this.serverInterval = setInterval(() => this.flush(this.dataName),this.timeStep * minute);\n  }\n\n  clear() {\n    clearInterval(this.serverInterval);\n  }\n\n  flush(eventName) {\n    Object.assign(this.eventDatas, {\n      'stay': {\n        'startTime': this.startTime\n      }\n    });\n    this.emit(eventName, {'events': this.eventDatas, 'startTime': this.startTime})\n      .then(response => {\n        this.startTime = response.startTime;\n        \n        this.receiveFinish(response);\n      })\n      .catch(() => {\n        //\n      })\n  }\n\n  // 监听activity的事件\n  receive(event, callback) {\n    this.eventMap.receives[event] = this.eventMap.receives[event] || [];\n    this.eventMap.receives[event].push(callback);\n  }\n}\n"]}